"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[215],{2228:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-05c19f3e","path":"/pages/project/1.%E9%9F%B3%E8%A7%86%E9%A2%91%E9%80%9A%E8%AF%9D.html","title":"1.音视频通话","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"服务端","slug":"服务端","link":"#服务端","children":[{"level":3,"title":"1. 使用 nodejs 和 socket.io 实现信令服务器","slug":"_1-使用-nodejs-和-socket-io-实现信令服务器","link":"#_1-使用-nodejs-和-socket-io-实现信令服务器","children":[]},{"level":3,"title":"2. 搭建 sturn/turn 服务器","slug":"_2-搭建-sturn-turn-服务器","link":"#_2-搭建-sturn-turn-服务器","children":[]}]},{"level":2,"title":"客户端","slug":"客户端","link":"#客户端","children":[{"level":3,"title":"Web","slug":"web","link":"#web","children":[]},{"level":3,"title":"Android","slug":"android","link":"#android","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1689519943000,"contributors":[{"name":"make","email":"yang1001yk@gmail.com","commits":1}]},"filePathRelative":"pages/project/1.音视频通话.md"}')},6981:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var t=a(6252);const p=(0,t.uE)('<h1 id="_1-音视频通话" tabindex="-1"><a class="header-anchor" href="#_1-音视频通话" aria-hidden="true">#</a> 1.音视频通话</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>本文将详细介绍如何利用 <strong>WebRTC</strong> 技术实现 <strong>P2P</strong> 音视频通话，并提供了一个跨平台的方案，包括：基于 <strong>socket.io</strong> 和 <strong>Node.js</strong> 实现的服务端，以及 <strong>JavaScript</strong> 和 <strong>Android</strong> 客户端。让我们一起来探讨如何搭建这个系统，以及如何编写代码吧。</p><p>由于 server 、js、android 代码还在整理中，预计还需要 2-3 天时间。地址:https://github.com/yangkun19921001/OpenRTCProject。</p><p>下面是 PC 与 IOS 在不同网络环境下的效果图(WiFi &lt;-&gt;移动网络)：</p><p><img src="http://devyk.top/2022/202303252219247.gif" alt=""></p><h2 id="服务端" tabindex="-1"><a class="header-anchor" href="#服务端" aria-hidden="true">#</a> 服务端</h2><h3 id="_1-使用-nodejs-和-socket-io-实现信令服务器" tabindex="-1"><a class="header-anchor" href="#_1-使用-nodejs-和-socket-io-实现信令服务器" aria-hidden="true">#</a> 1. 使用 nodejs 和 socket.io 实现信令服务器</h3><p>我们借助上一篇信令服务的流程图，来实现一个 nodejs 信令服务器</p><p><img src="http://devyk.top/2022/202303221325023.png" alt=""></p><p>我们先设计一个信令</p><p><strong>join:</strong> 当前用户和远端用户加入到房间中的信令</p><p><strong>leave:</strong> 当前用户和远端用户离开房间的信令</p><p><strong>message:</strong> 交换双方的 SDP、ICE 信令</p><p>首先，我们需要搭建一个 <strong>Node.js</strong> 服务端，用于处理信令交换。在这里，我们将使用 <strong>socket.io</strong> 库作为通信协议，借助 http、https、fs 等组件。实现一个简单的 <strong>Node.js</strong> 服务端实例：</p><p>create server.js 下面就是信令服务的核心代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> log4js <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;log4js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> https <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;https&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> socketIo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;socket.io&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;express&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> serveIndex <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;serve-index&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> <span class="token constant">USERCOUNT</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n\n<span class="token operator">...</span>\n\n<span class="token comment">//http server</span>\n<span class="token keyword">var</span> http_server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>app<span class="token punctuation">)</span><span class="token punctuation">;</span>\nhttp_server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>\n        <span class="token literal-property property">key</span> <span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./cert/xxx.key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token literal-property property">cert</span><span class="token operator">:</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">&#39;./cert/xxx.pem&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//https server</span>\n<span class="token keyword">var</span> https_server <span class="token operator">=</span> https<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> app<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> io <span class="token operator">=</span> socketIo<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>https_server<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\nio<span class="token punctuation">.</span>sockets<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;connection&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">room<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n            socket<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>room<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span>room<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//发送给当前房间的其它客户端</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;join&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">room</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n            socket<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>room<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">var</span> myRoom <span class="token operator">=</span> io<span class="token punctuation">.</span>sockets<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span>rooms<span class="token punctuation">[</span>room<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">(</span>myRoom<span class="token punctuation">)</span><span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>myRoom<span class="token punctuation">.</span>sockets<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n            logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;the user number of room is: &#39;</span> <span class="token operator">+</span> users<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token keyword">if</span><span class="token punctuation">(</span>users <span class="token operator">&lt;</span> <span class="token constant">USERCOUNT</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;joined&#39;</span><span class="token punctuation">,</span> room<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//发送给自己，相当于回调</span>\n               <span class="token keyword">if</span><span class="token punctuation">(</span>users <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                  socket<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>room<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;otherjoin&#39;</span><span class="token punctuation">,</span> room<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//发送给当前房间的其它客户端</span>\n                    <span class="token punctuation">}</span>\n\n            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n                    socket<span class="token punctuation">.</span><span class="token function">leave</span><span class="token punctuation">(</span>room<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;full&#39;</span><span class="token punctuation">,</span> room<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;leave&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">room</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n        <span class="token keyword">var</span> myRoom <span class="token operator">=</span> io<span class="token punctuation">.</span>sockets<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span>rooms<span class="token punctuation">[</span>room<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">(</span>myRoom<span class="token punctuation">)</span><span class="token operator">?</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>myRoom<span class="token punctuation">.</span>sockets<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>\n        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&#39;the user number of room is: &#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span>users<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        socket<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>room<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;bye&#39;</span><span class="token punctuation">,</span> room<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;leaved&#39;</span><span class="token punctuation">,</span> room<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nhttps_server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">443</span><span class="token punctuation">,</span> <span class="token string">&#39;0.0.0.0&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要运行上面的 server.js 信令服务器，您需要按照以下步骤进行安装和运行：</p><ol><li>安装 Node.js 和 npm：</li><li>安装所需的依赖项</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> express socket.io fs http https\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="3"><li>启动 server</li></ol><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">node</span> server.js\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_2-搭建-sturn-turn-服务器" tabindex="-1"><a class="header-anchor" href="#_2-搭建-sturn-turn-服务器" aria-hidden="true">#</a> 2. 搭建 sturn/turn 服务器</h3><p>由于网络环境的影响我们需要搭建一个 sturn/turn 服务器，以便提升 P2P 的成功率，下面是一个粗略的搭建方式，但是也够用了。</p><ol><li>安装 Coturn</li></ol><p>在终端中输入以下命令，使用 yum 包管理器安装 Coturn：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> yum <span class="token function">install</span> coturn\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="2"><li>配置 Coturn</li></ol><p>找到并编辑 Coturn 的配置文件 <code>/etc/coturn/turnserver.conf</code>，根据您的需求修改以下配置项：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 配置监听的端口号</span>\nlistening-port<span class="token operator">=</span><span class="token number">3478</span>\nmin-port<span class="token operator">=</span><span class="token number">49152</span>\nmax-port<span class="token operator">=</span><span class="token number">65535</span>\n<span class="token comment">#配置域名</span>\n<span class="token assign-left variable">realm</span><span class="token operator">=</span>xxx.com\n<span class="token comment">#允许使用 TURN/STUN 服务的用户的凭据</span>\n<span class="token assign-left variable">user</span><span class="token operator">=</span><span class="token number">123456</span>:123456\n<span class="token assign-left variable">cert</span><span class="token operator">=</span>/path/to/xxx.pem\n<span class="token assign-left variable">pkey</span><span class="token operator">=</span>/path/to/xxx.pem\n<span class="token comment"># 配置日志文件路径</span>\nlog-file<span class="token operator">=</span>/root/log/turnserver.log\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>启动 Coturn</li></ol><p>在终端中输入以下命令，启动 Coturn 服务：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">sudo</span> systemctl start coturn\n<span class="token function">sudo</span> systemctl stop coturn\n<span class="token function">sudo</span> systemctl restart coturn\n<span class="token function">sudo</span> systemctl status coturn\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',33),e={start:"4"},o=(0,t._)("p",null,"测试 coturn",-1),c={href:"https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/",target:"_blank",rel:"noopener noreferrer"},i=(0,t._)("p",null,[(0,t._)("img",{src:"http://devyk.top/2022/202303252030890.png",alt:""})],-1),l=(0,t.uE)('<p>正如 trickle-ice 网站所说: 如果你测试一个 STUN 服务器，你能收集到一个类型为“srflx”的候选者，它就可以工作。如果你测试一个 TURN 服务器，你能收集到一个类型为“relay”的候选人，它就会工作.</p><p>由此上图 sturn 和 turn 候选者地址都能成功连接。</p><h2 id="客户端" tabindex="-1"><a class="header-anchor" href="#客户端" aria-hidden="true">#</a> 客户端</h2><p>WebRTC 是一种基于 <strong>Web</strong> 技术的实时通信解决方案，可用于在浏览器中实现P2P音视频通话。当然，现在基本上所有上层平台都支持了。在 <strong>WebRTC</strong> 中，双方通信通过 <strong>ICE</strong> 协议进行连接，通过 <strong>SDP</strong> 协议交换媒体信息，通过 <strong>DTLS</strong> 协议进行加密，通过 <strong>SRTP</strong> 协议进行媒体传输。</p><p>下面，我们将为你介绍如何使用 <strong>WebRTC</strong> 在浏览器和 <strong>Android</strong> 中实现 <strong>P2P</strong> 音视频通话。</p><h3 id="web" tabindex="-1"><a class="header-anchor" href="#web" aria-hidden="true">#</a> Web</h3><p>我们按照上面信令的流程来实现:</p><h4 id="_1-获取媒体流" tabindex="-1"><a class="header-anchor" href="#_1-获取媒体流" aria-hidden="true">#</a> 1. 获取媒体流</h4><p><strong>WebRTC</strong> 支持从设备摄像头和麦克风获取视频和音频流。使用 <strong>JavaScript</strong> 的<code>getUserMedia</code> API，您可以请求用户授权，从摄像头和麦克风获取本地媒体流，并将其添加到一个<code>MediaStream</code>对象中。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">startCall</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n\t<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>navigator<span class="token punctuation">.</span>mediaDevices <span class="token operator">||</span>\n\t\t<span class="token operator">!</span>navigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span>getUserMedia<span class="token punctuation">)</span><span class="token punctuation">{</span>\n\t\tconsole<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;the getUserMedia is not supported!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token keyword">return</span><span class="token punctuation">;</span>\n\t<span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n\n\t\t<span class="token keyword">var</span> constraints <span class="token operator">=</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token literal-property property">video</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">//传输视频</span>\n\t\t\t<span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">//传输音频</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\tnavigator<span class="token punctuation">.</span>mediaDevices<span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span>constraints<span class="token punctuation">)</span>\n\t\t\t\t\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>getMediaStream<span class="token punctuation">)</span><span class="token comment">//打开成功的回调</span>\n\t\t\t\t\t<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>handleError<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开失败</span>\n\t<span class="token punctuation">}</span>\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-连接信令服务器并加入到房间中" tabindex="-1"><a class="header-anchor" href="#_2-连接信令服务器并加入到房间中" aria-hidden="true">#</a> 2.连接信令服务器并加入到房间中</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">//连接信令服务器</span>\n  socket <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//加入成功的通知</span>\n  \tsocket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;joined&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">roomid<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token operator">...</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//远端加入</span>\n  \tsocket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;otherjoin&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">roomid</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token operator">...</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//房间满了</span>\n  \tsocket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;full&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">roomid<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token operator">...</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token comment">//接收自己离开房间的回调</span>\n   socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;leaved&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">roomid<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token operator">...</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//收到对方挂断的消息</span>\n   socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;bye&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">room<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t <span class="token operator">...</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//收到服务断开的消息</span>\n  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;disconnect&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">socket</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t<span class="token operator">...</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//收消息，用于交换 SDP 和 ICE 消息等</span>\n  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">roomid<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  \t<span class="token operator">...</span>\n\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">//发送 join 消息到信令服务器并加入到 123456 房间中</span>\n  socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;join&#39;</span><span class="token punctuation">,</span> <span class="token number">123456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-创建-peerconnection-并添加媒体轨道" tabindex="-1"><a class="header-anchor" href="#_3-创建-peerconnection-并添加媒体轨道" aria-hidden="true">#</a> 3. 创建 PeerConnection 并添加媒体轨道</h4><p>当收到自己加入房间成功的消息后，连接到远程对等方，我们就需要创建一个<code>RTCPeerConnection</code>对象，并将本地媒体流添加到其中。然后，您需要创建一个<code>RTCDataChannel</code>对象，用于在对等方之间传输数据。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> pcConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">&#39;iceServers&#39;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n    <span class="token string-property property">&#39;urls&#39;</span><span class="token operator">:</span> <span class="token string">&#39;turn:xxx:3478&#39;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;credential&#39;</span><span class="token operator">:</span> <span class="token string">&quot;1234&quot;</span><span class="token punctuation">,</span>\n    <span class="token string-property property">&#39;username&#39;</span><span class="token operator">:</span> <span class="token string">&quot;1234&quot;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\npc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">(</span>pcConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token comment">//当前 icecandida 数据</span>\npc<span class="token punctuation">.</span><span class="token function-variable function">onicecandidate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n      <span class="token operator">...</span>\n<span class="token punctuation">}</span>\n\n    <span class="token comment">//datachannel 传输通道</span>\npc<span class="token punctuation">.</span><span class="token function-variable function">ondatachannel</span> <span class="token operator">=</span> <span class="token parameter">e</span><span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n\t\t<span class="token operator">...</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 添加远端的媒体流到 &lt;video&gt;  element</span>\npc<span class="token punctuation">.</span>ontrack <span class="token operator">=</span> getRemoteStream<span class="token punctuation">;</span>\n  \n<span class="token comment">//最后添加媒体轨道到 peerconnection 对象中</span>\nlocalStream<span class="token punctuation">.</span><span class="token function">getTracks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">track</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n\t\tpc<span class="token punctuation">.</span><span class="token function">addTrack</span><span class="token punctuation">(</span>track<span class="token punctuation">,</span> localStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\t\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n<span class="token comment">//创建一个非音视频的数据通道</span>\ndc <span class="token operator">=</span> pc<span class="token punctuation">.</span><span class="token function">createDataChannel</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ndc<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> receivemsg<span class="token punctuation">;</span><span class="token comment">//接收对端消息</span>\ndc<span class="token punctuation">.</span>onopen <span class="token operator">=</span> dataChannelStateChange<span class="token punctuation">;</span><span class="token comment">//当打开</span>\ndc<span class="token punctuation">.</span>onclose <span class="token operator">=</span> dataChannelStateChange<span class="token punctuation">;</span><span class="token comment">//当关闭</span>\n  \n<span class="token keyword">function</span> <span class="token function">getRemoteStream</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\tremoteStream <span class="token operator">=</span> e<span class="token punctuation">.</span>streams<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\tremoteVideo<span class="token punctuation">.</span>srcObject <span class="token operator">=</span> e<span class="token punctuation">.</span>streams<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-发送-createoffer-数据到远端" tabindex="-1"><a class="header-anchor" href="#_4-发送-createoffer-数据到远端" aria-hidden="true">#</a> 4. 发送 createOffer 数据到远端</h4><p>当对方加入到房间中，我们需要把当前 UserA 的 SDP 信息告诉 UserB 用户，使用如下代码</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>\t\t<span class="token keyword">var</span> offerOptions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token comment">//同时接收远端的音、视频数据</span>\n\t\t\t<span class="token literal-property property">offerToRecieveAudio</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> \n\t\t\t<span class="token literal-property property">offerToRecieveVideo</span><span class="token operator">:</span> <span class="token number">1</span>\n\t\t<span class="token punctuation">}</span>\n\n\t\tpc<span class="token punctuation">.</span><span class="token function">createOffer</span><span class="token punctuation">(</span>offerOptions<span class="token punctuation">)</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>getOffer<span class="token punctuation">)</span><span class="token comment">//创建成功的回调</span>\n\t\t\t<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>handleOfferError<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">getOffer</span><span class="token punctuation">(</span><span class="token parameter">desc</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  <span class="token comment">//设置 UserA SDP 信息</span>\n\tpc<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\tofferdesc <span class="token operator">=</span> desc<span class="token punctuation">;</span>\n\n\t<span class="token comment">//将 usera 的 SDP 发送到信令服务器，信令服务器再根据 roomid 进行转发</span>\n\t<span class="token function">sendMessage</span><span class="token punctuation">(</span>roomid<span class="token punctuation">,</span> offerdesc<span class="token punctuation">)</span><span class="token punctuation">;</span>\t\n\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-发送-answer-消息到对方" tabindex="-1"><a class="header-anchor" href="#_5-发送-answer-消息到对方" aria-hidden="true">#</a> 5. 发送 answer 消息到对方</h4><p>当 UserB 收到 UserA 发来的 offer 消息，我们需要设置 UserA 的 SDP 并且设置当前的 SDP 然后再讲自己的 SDP 发送给 UserA,以进行媒体协商, 如下代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//1. 当收到 UserA OFFER 消息，设置 SDP</span>\npc<span class="token punctuation">.</span><span class="token function">setRemoteDescription</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RTCSessionDescription</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//2. 然后创建 answer 消息</span>\npc<span class="token punctuation">.</span><span class="token function">createAnswer</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>getAnswer<span class="token punctuation">)</span>\n<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span>handleAnswerError<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//3. 当创建成功后，拿到 UserB 自己的 SDP 消息并设置当前的 SDP 信息，最后再讲 SDP 消息发给信令再转发给 roomid 房间中的客户端</span>\n<span class="token keyword">function</span> <span class="token function">getAnswer</span><span class="token punctuation">(</span><span class="token parameter">desc</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\tpc<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">(</span>desc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\toptBw<span class="token punctuation">.</span>disabled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\t<span class="token comment">//send answer sdp</span>\n\t<span class="token function">sendMessage</span><span class="token punctuation">(</span>roomid<span class="token punctuation">,</span> desc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-接收-answer-消息-并设置-userb-的-sdp-信息" tabindex="-1"><a class="header-anchor" href="#_6-接收-answer-消息-并设置-userb-的-sdp-信息" aria-hidden="true">#</a> 6. 接收 answer 消息，并设置 UserB 的 SDP 信息</h4><p>当我们收到 UserB 发来的 answer sdp 消息后告诉底层</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>pc<span class="token punctuation">.</span><span class="token function">setRemoteDescription</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RTCSessionDescription</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7-交换-ice-候选" tabindex="-1"><a class="header-anchor" href="#_7-交换-ice-候选" aria-hidden="true">#</a> 7. 交换 ICE 候选</h4><p>SDP 协商完后，UserA / UserB 交换 ice 消息，用于 nat 和转发媒体数据，如果都在局域网其实可以省略这一步</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//user A / UserB 收到 onicecandidate 回调然后将 candidate 发送给 UserB</span>\npc<span class="token punctuation">.</span><span class="token function-variable function">onicecandidate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n   <span class="token keyword">if</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>candidate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t\t<span class="token function">sendMessage</span><span class="token punctuation">(</span>roomid<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n\t\t\t\t\t<span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;candidate&#39;</span><span class="token punctuation">,</span>\n\t\t\t\t\t<span class="token literal-property property">label</span><span class="token operator">:</span>event<span class="token punctuation">.</span>candidate<span class="token punctuation">.</span>sdpMLineIndex<span class="token punctuation">,</span> \n\t\t\t\t\t<span class="token literal-property property">id</span><span class="token operator">:</span>event<span class="token punctuation">.</span>candidate<span class="token punctuation">.</span>sdpMid<span class="token punctuation">,</span> \n\t\t\t\t\t<span class="token literal-property property">candidate</span><span class="token operator">:</span> event<span class="token punctuation">.</span>candidate<span class="token punctuation">.</span>candidate\n\t\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>\n\t\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;this is the end candidate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">}</span>\n\t\t<span class="token punctuation">}</span>\n\n<span class="token comment">//当 UserB / UserA 接收到 UserA / UserB 的candidate 后进行添加</span>\n<span class="token keyword">function</span> <span class="token function">addIcecandida</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n\n\t\t\t<span class="token keyword">var</span> candidate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RTCIceCandidate</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n\t\t\t\t<span class="token literal-property property">sdpMLineIndex</span><span class="token operator">:</span> data<span class="token punctuation">.</span>label<span class="token punctuation">,</span>\n\t\t\t\t<span class="token literal-property property">candidate</span><span class="token operator">:</span> data<span class="token punctuation">.</span>candidate\n\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\tpc<span class="token punctuation">.</span><span class="token function">addIceCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">)</span>\n\t\t\t\t<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n\t\t\t\t\tconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Successed to add ice candidate&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\t\n\t\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\t\t\t\t<span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>\n\t\t\t\t\tconsole<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>\t\n\t\t\t\t<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h4><p>通过如上核心步骤代码，你已经完成了一个基于 <strong>WebRTC</strong> JS 版的跨平台 <strong>P2P</strong> 音视频通话系统。当然，这里展示的代码只是简化版示例，完整版的代码可以点击文末简介处有说明。</p><h3 id="android" tabindex="-1"><a class="header-anchor" href="#android" aria-hidden="true">#</a> Android</h3><p>上面我们实现了 服务端和跨平台的 JS 端，最后我们实现一个 Android 端，毕竟最开始我就是搞 Android 的😄。</p><p>对于Android客户端，您可以使用 <strong>Google</strong> 提供的 <strong>WebRTC</strong> 库。如下，当前也可以直接依赖 java/c++ 源码。当前我们就是直接依赖的 java/c++ 源码</p><p>依赖 wertc sdk 方式，在<code>build.gradle</code>文件中添加依赖项：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>implementation <span class="token string">&#39;org.webrtc:google-webrtc:1.0.+&#39;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>依赖 wertc 源码 方式，在<code>build.gradle</code>文件中添加如下设置：</p><div class="language-groovy line-numbers-mode" data-ext="groovy"><pre class="language-groovy"><code>    externalNativeBuild <span class="token punctuation">{</span>\n        cmake <span class="token punctuation">{</span>\n            version <span class="token interpolation-string"><span class="token string">&quot;3.10.2&quot;</span></span>\n            path <span class="token string">&#39;CMakeLists.txt&#39;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>没错，我们通过编写 cmake 直接依赖的 c++ 源码。好了，依赖方式就不再多说了，可以直接去看项目中的 build.gradle 文件即可。</p><p>Android 上的实现步骤流程与 JS 几乎一样，我们来看一下如何实现吧。</p><h4 id="_1-获取媒体流并初始化-peerconnectionfactory" tabindex="-1"><a class="header-anchor" href="#_1-获取媒体流并初始化-peerconnectionfactory" aria-hidden="true">#</a> 1. 获取媒体流并初始化 PeerConnectionFactory</h4><p>这里我们直接通过 Camera2 来实现相机数据的采集</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">VideoCapturer</span> <span class="token function">createVideoCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> <span class="token class-name">VideoCapturer</span> videoCapturer<span class="token punctuation">;</span>\n    videoCapturer <span class="token operator">=</span> <span class="token function">createCameraCapturer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Camera2Enumerator</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> videoCapturer<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n\n<span class="token comment">//设置本地预览窗口</span>\nmLocalSurfaceView<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>mRootEglBase<span class="token punctuation">.</span><span class="token function">getEglBaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmLocalSurfaceView<span class="token punctuation">.</span><span class="token function">setScalingType</span><span class="token punctuation">(</span><span class="token class-name">RendererCommon<span class="token punctuation">.</span>ScalingType</span><span class="token punctuation">.</span><span class="token constant">SCALE_ASPECT_FILL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmLocalSurfaceView<span class="token punctuation">.</span><span class="token function">setMirror</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmLocalSurfaceView<span class="token punctuation">.</span><span class="token function">setEnableHardwareScaler</span><span class="token punctuation">(</span><span class="token boolean">false</span> <span class="token comment">/* enabled */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//设置远端预览窗口</span>\nmRemoteSurfaceView<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span>mRootEglBase<span class="token punctuation">.</span><span class="token function">getEglBaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmRemoteSurfaceView<span class="token punctuation">.</span><span class="token function">setScalingType</span><span class="token punctuation">(</span><span class="token class-name">RendererCommon<span class="token punctuation">.</span>ScalingType</span><span class="token punctuation">.</span><span class="token constant">SCALE_ASPECT_FILL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmRemoteSurfaceView<span class="token punctuation">.</span><span class="token function">setMirror</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmRemoteSurfaceView<span class="token punctuation">.</span><span class="token function">setEnableHardwareScaler</span><span class="token punctuation">(</span><span class="token boolean">true</span> <span class="token comment">/* enabled */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmRemoteSurfaceView<span class="token punctuation">.</span><span class="token function">setZOrderMediaOverlay</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ncallStartedTimeMs <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//创建 factory， pc是从factory里获得的</span>\n<span class="token function">createPeerConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createPeerConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">final</span> <span class="token class-name">String</span> fieldTrials <span class="token operator">=</span> <span class="token function">getFieldTrials</span><span class="token punctuation">(</span>mPeerConnectionParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Initialize WebRTC. Field trials: &quot;</span> <span class="token operator">+</span> fieldTrials<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">PeerConnectionFactory</span><span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>\n                    <span class="token class-name">PeerConnectionFactory<span class="token punctuation">.</span>InitializationOptions</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span>mContext<span class="token punctuation">)</span>\n                            <span class="token punctuation">.</span><span class="token function">setFieldTrials</span><span class="token punctuation">(</span>fieldTrials<span class="token punctuation">)</span>\n                            <span class="token punctuation">.</span><span class="token function">setEnableInternalTracer</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>\n                            <span class="token punctuation">.</span><span class="token function">createInitializationOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token function">createPeerConnectionFactoryInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-连接信令服务器并加入到房间中-1" tabindex="-1"><a class="header-anchor" href="#_2-连接信令服务器并加入到房间中-1" aria-hidden="true">#</a> 2. 连接信令服务器并加入到房间中</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connectToRoom</span><span class="token punctuation">(</span><span class="token class-name">RoomConnectionParameters</span> parameters<span class="token punctuation">,</span> <span class="token class-name">ISignalEventListener</span> signalEventListener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        mRoomConnectParameters <span class="token operator">=</span> parameters<span class="token punctuation">;</span>\n        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>mISignalClient <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                    mISignalClient<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>parameters<span class="token punctuation">.</span>roomUrl<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ISignalEventListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token annotation punctuation">@Override</span>\n                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">OnConnecting</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;OnConnecting&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n                        <span class="token punctuation">}</span>\n\n                        <span class="token annotation punctuation">@Override</span>\n                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">OnConnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;OnConnected&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;join:&quot;</span> <span class="token operator">+</span> parameters<span class="token punctuation">.</span>roomId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            mISignalClient<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>parameters<span class="token punctuation">.</span>roomId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n                        <span class="token punctuation">}</span>\n\n                        <span class="token annotation punctuation">@Override</span>\n                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">OnDisconnected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token keyword">if</span> <span class="token punctuation">(</span>signalEventListener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                                <span class="token class-name"><span class="token namespace">signalEventListener<span class="token punctuation">.</span></span>OnConnecting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token punctuation">}</span>\n                        <span class="token punctuation">}</span>\n\n                        <span class="token annotation punctuation">@Override</span>\n                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">OnUserJoined</span><span class="token punctuation">(</span><span class="token class-name">String</span> roomName<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isInitiator<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token keyword">if</span> <span class="token punctuation">(</span>signalEventListener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                                <span class="token class-name"><span class="token namespace">signalEventListener<span class="token punctuation">.</span></span>OnUserJoined</span><span class="token punctuation">(</span>roomName<span class="token punctuation">,</span> userId<span class="token punctuation">,</span> isInitiator<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token punctuation">}</span>\n                            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;joined:&quot;</span> <span class="token operator">+</span> roomName <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> userId <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> isInitiator<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;createPeerConnection&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n                        <span class="token punctuation">}</span>\n\n                        <span class="token annotation punctuation">@Override</span>\n                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">OnUserLeaved</span><span class="token punctuation">(</span><span class="token class-name">String</span> roomName<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n                        <span class="token punctuation">}</span>\n\n                        <span class="token annotation punctuation">@Override</span>\n                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">OnRemoteUserJoined</span><span class="token punctuation">(</span><span class="token class-name">String</span> roomName<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;createOffer &quot;</span> <span class="token operator">+</span> roomName <span class="token operator">+</span> <span class="token string">&quot;-&quot;</span> <span class="token operator">+</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n                        <span class="token punctuation">}</span>\n\n                        <span class="token annotation punctuation">@Override</span>\n                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">OnRemoteUserLeaved</span><span class="token punctuation">(</span><span class="token class-name">String</span> roomName<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                              <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n                        <span class="token punctuation">}</span>\n\n                        <span class="token annotation punctuation">@Override</span>\n                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">OnRoomFull</span><span class="token punctuation">(</span><span class="token class-name">String</span> roomName<span class="token punctuation">,</span> <span class="token class-name">String</span> userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                             <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n                        <span class="token punctuation">}</span>\n\n                        <span class="token annotation punctuation">@Override</span>\n                        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">OnMessage</span><span class="token punctuation">(</span><span class="token class-name">JSONObject</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n                        <span class="token punctuation">}</span>\n                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-创建-peerconnection-并添加媒体轨道-1" tabindex="-1"><a class="header-anchor" href="#_3-创建-peerconnection-并添加媒体轨道-1" aria-hidden="true">#</a> 3. 创建 PeerConnection 并添加媒体轨道</h4><p>当收到自己加入房间成功的消息后，连接到远程对等方，我们就需要创建一个<code>PeerConnection</code>对象，并将本地媒体流添加到其中。然后，您需要创建一个<code>DataChannel</code>对象，用于在对等方之间传输数据。</p><p>简要代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">//当连接成功并且进入到房间中执行</span>\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createPeerConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                <span class="token function">createMediaConstraintsInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token function">createPeerConnectionInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;createPeerConnection Succeed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Failed to create peer connection: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">throw</span> e<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createMediaConstraintsInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// Create video constraints if video call is enabled.</span>\n\t\t\t\t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n        <span class="token comment">// Create audio constraints.</span>\n        mAudioConstraints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// added for audio performance measurements</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>mPeerConnectionParameters<span class="token punctuation">.</span>noAudioProcessing<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Disabling audio processing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            mAudioConstraints<span class="token punctuation">.</span>mandatory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>\n                    <span class="token keyword">new</span> <span class="token class-name">MediaConstraints<span class="token punctuation">.</span>KeyValuePair</span><span class="token punctuation">(</span><span class="token constant">AUDIO_ECHO_CANCELLATION_CONSTRAINT</span><span class="token punctuation">,</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            mAudioConstraints<span class="token punctuation">.</span>mandatory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>\n                    <span class="token keyword">new</span> <span class="token class-name">MediaConstraints<span class="token punctuation">.</span>KeyValuePair</span><span class="token punctuation">(</span><span class="token constant">AUDIO_AUTO_GAIN_CONTROL_CONSTRAINT</span><span class="token punctuation">,</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            mAudioConstraints<span class="token punctuation">.</span>mandatory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>\n                    <span class="token keyword">new</span> <span class="token class-name">MediaConstraints<span class="token punctuation">.</span>KeyValuePair</span><span class="token punctuation">(</span><span class="token constant">AUDIO_HIGH_PASS_FILTER_CONSTRAINT</span><span class="token punctuation">,</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            mAudioConstraints<span class="token punctuation">.</span>mandatory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>\n                    <span class="token keyword">new</span> <span class="token class-name">MediaConstraints<span class="token punctuation">.</span>KeyValuePair</span><span class="token punctuation">(</span><span class="token constant">AUDIO_NOISE_SUPPRESSION_CONSTRAINT</span><span class="token punctuation">,</span> <span class="token string">&quot;false&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">// Create SDP constraints.</span>\n        mSdpMediaConstraints <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MediaConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        mSdpMediaConstraints<span class="token punctuation">.</span>mandatory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>\n                <span class="token keyword">new</span> <span class="token class-name">MediaConstraints<span class="token punctuation">.</span>KeyValuePair</span><span class="token punctuation">(</span><span class="token string">&quot;OfferToReceiveAudio&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;true&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        mSdpMediaConstraints<span class="token punctuation">.</span>mandatory<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MediaConstraints<span class="token punctuation">.</span>KeyValuePair</span><span class="token punctuation">(</span>\n                <span class="token string">&quot;OfferToReceiveVideo&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token function">isVideoCallEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createPeerConnectionInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>mPeerConnectionFactory <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Peerconnection factory is not created&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Create peer connection.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        queuedRemoteCandidates <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PeerConnection<span class="token punctuation">.</span>IceServer</span><span class="token punctuation">&gt;</span></span> iceServers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        iceServers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">PeerConnection<span class="token punctuation">.</span>IceServer</span>\n                <span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token string">&quot;turn:xxx:3478&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">&quot;xxx&quot;</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">createIceServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">PeerConnection<span class="token punctuation">.</span>RTCConfiguration</span> rtcConfig <span class="token operator">=</span>\n                <span class="token keyword">new</span> <span class="token class-name">PeerConnection<span class="token punctuation">.</span>RTCConfiguration</span><span class="token punctuation">(</span>iceServers<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token comment">// TCP candidates are only useful when connecting to a server that supports</span>\n        <span class="token comment">// ICE-TCP.</span>\n        rtcConfig<span class="token punctuation">.</span>tcpCandidatePolicy <span class="token operator">=</span> <span class="token class-name">PeerConnection<span class="token punctuation">.</span>TcpCandidatePolicy</span><span class="token punctuation">.</span><span class="token constant">DISABLED</span><span class="token punctuation">;</span>\n        rtcConfig<span class="token punctuation">.</span>bundlePolicy <span class="token operator">=</span> <span class="token class-name">PeerConnection<span class="token punctuation">.</span>BundlePolicy</span><span class="token punctuation">.</span><span class="token constant">MAXBUNDLE</span><span class="token punctuation">;</span>\n        rtcConfig<span class="token punctuation">.</span>rtcpMuxPolicy <span class="token operator">=</span> <span class="token class-name">PeerConnection<span class="token punctuation">.</span>RtcpMuxPolicy</span><span class="token punctuation">.</span><span class="token constant">REQUIRE</span><span class="token punctuation">;</span>\n        rtcConfig<span class="token punctuation">.</span>continualGatheringPolicy <span class="token operator">=</span> <span class="token class-name">PeerConnection<span class="token punctuation">.</span>ContinualGatheringPolicy</span><span class="token punctuation">.</span><span class="token constant">GATHER_CONTINUALLY</span><span class="token punctuation">;</span>\n        <span class="token comment">// Use ECDSA encryption.</span>\n        rtcConfig<span class="token punctuation">.</span>keyType <span class="token operator">=</span> <span class="token class-name">PeerConnection<span class="token punctuation">.</span>KeyType</span><span class="token punctuation">.</span><span class="token constant">ECDSA</span><span class="token punctuation">;</span>\n        rtcConfig<span class="token punctuation">.</span>sdpSemantics <span class="token operator">=</span> <span class="token class-name">PeerConnection<span class="token punctuation">.</span>SdpSemantics</span><span class="token punctuation">.</span><span class="token constant">UNIFIED_PLAN</span><span class="token punctuation">;</span>\n        mPeerConnection <span class="token operator">=</span> mPeerConnectionFactory<span class="token punctuation">.</span><span class="token function">createPeerConnection</span><span class="token punctuation">(</span>rtcConfig<span class="token punctuation">,</span> pcObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>dataChannelEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">DataChannel<span class="token punctuation">.</span>Init</span> init <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataChannel<span class="token punctuation">.</span>Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            init<span class="token punctuation">.</span>ordered <span class="token operator">=</span> mPeerConnectionParameters<span class="token punctuation">.</span>dataChannelParameters<span class="token punctuation">.</span>ordered<span class="token punctuation">;</span>\n            init<span class="token punctuation">.</span>negotiated <span class="token operator">=</span> mPeerConnectionParameters<span class="token punctuation">.</span>dataChannelParameters<span class="token punctuation">.</span>negotiated<span class="token punctuation">;</span>\n            init<span class="token punctuation">.</span>maxRetransmits <span class="token operator">=</span> mPeerConnectionParameters<span class="token punctuation">.</span>dataChannelParameters<span class="token punctuation">.</span>maxRetransmits<span class="token punctuation">;</span>\n            init<span class="token punctuation">.</span>maxRetransmitTimeMs <span class="token operator">=</span> mPeerConnectionParameters<span class="token punctuation">.</span>dataChannelParameters<span class="token punctuation">.</span>maxRetransmitTimeMs<span class="token punctuation">;</span>\n            init<span class="token punctuation">.</span>id <span class="token operator">=</span> mPeerConnectionParameters<span class="token punctuation">.</span>dataChannelParameters<span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n            init<span class="token punctuation">.</span>protocol <span class="token operator">=</span> mPeerConnectionParameters<span class="token punctuation">.</span>dataChannelParameters<span class="token punctuation">.</span>protocol<span class="token punctuation">;</span>\n            mDataChannel <span class="token operator">=</span> mPeerConnection<span class="token punctuation">.</span><span class="token function">createDataChannel</span><span class="token punctuation">(</span><span class="token string">&quot;P2P data&quot;</span><span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        isInitiator <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n        <span class="token comment">// Set INFO libjingle logging.</span>\n        <span class="token comment">// NOTE: this _must_ happen while `factory` is alive!</span>\n        <span class="token class-name">Logging</span><span class="token punctuation">.</span><span class="token function">enableLogToDebugOutput</span><span class="token punctuation">(</span><span class="token class-name">Logging<span class="token punctuation">.</span>Severity</span><span class="token punctuation">.</span><span class="token constant">LS_INFO</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> mediaStreamLabels <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token string">&quot;ARDAMS&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVideoCallEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            mPeerConnection<span class="token punctuation">.</span><span class="token function">addTrack</span><span class="token punctuation">(</span><span class="token function">createVideoTrack</span><span class="token punctuation">(</span>mVideoCapture<span class="token punctuation">)</span><span class="token punctuation">,</span> mediaStreamLabels<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">// We can add the renderers right away because we don&#39;t need to wait for an</span>\n            <span class="token comment">// answer to get the remote track.</span>\n            remoteVideoTrack <span class="token operator">=</span> <span class="token function">getRemoteVideoTrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            remoteVideoTrack<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span>renderVideo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token comment">//目前就一个</span>\n            remoteVideoTrack<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>mRemoteSurfaceView<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        mPeerConnection<span class="token punctuation">.</span><span class="token function">addTrack</span><span class="token punctuation">(</span><span class="token function">createAudioTrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mediaStreamLabels<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVideoCallEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">findVideoSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-发送-createoffer-数据到远端-1" tabindex="-1"><a class="header-anchor" href="#_4-发送-createoffer-数据到远端-1" aria-hidden="true">#</a> 4. 发送 createOffer 数据到远端</h4><p>当对方加入到房间中，我们需要把当前 UserA 的 SDP 信息告诉 UserB 用户，使用如下代码</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>mPeerConnection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;PC Create OFFER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                isInitiator <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n                <span class="token comment">//1. create offer</span>\n                mPeerConnection<span class="token punctuation">.</span><span class="token function">createOffer</span><span class="token punctuation">(</span>sdpObserver<span class="token punctuation">,</span> mSdpMediaConstraints<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//2. 当 createOffer 成功我们会收到如下回调</span>\n<span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreateSuccess</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SessionDescription</span> desc<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">//然后我们需要设置当前的 SDP </span>\nmPeerConnection<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">(</span>sdpObserver<span class="token punctuation">,</span> newDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token comment">//3. 当设置成功后，我们会收到 onSetSuccess 回调，然后将 UserA SDP offer 消息发送给对等方</span>\n<span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSetSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token class-name">JSONObject</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token string">&quot;offer&quot;</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>sdp<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token class-name">SessionDescription<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">ANSWER</span><span class="token punctuation">)</span>\n                type <span class="token operator">=</span> <span class="token string">&quot;answer&quot;</span><span class="token punctuation">;</span>\n            message<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            message<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;sdp&quot;</span><span class="token punctuation">,</span> sdp<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-发送-answer-消息到对方-1" tabindex="-1"><a class="header-anchor" href="#_5-发送-answer-消息到对方-1" aria-hidden="true">#</a> 5. 发送 answer 消息到对方</h4><p>当 UserB 收到 UserA offer 消息后的处理</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//1.设置 UserA SDP 描述符   </span>\nmPeerConnection<span class="token punctuation">.</span><span class="token function">setRemoteDescription</span><span class="token punctuation">(</span>sdpObserver<span class="token punctuation">,</span> sdpRemote<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>desc<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token class-name">SessionDescription<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">OFFER</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Creating ANSWER...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//2. 创建 answer </span>\n    mPeerConnection<span class="token punctuation">.</span><span class="token function">createAnswer</span><span class="token punctuation">(</span>sdpObserver<span class="token punctuation">,</span> mSdpMediaConstraints<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//3. answer 创建成功后的处理</span>\nmPeerConnection<span class="token punctuation">.</span><span class="token function">setLocalDescription</span><span class="token punctuation">(</span>sdpObserver<span class="token punctuation">,</span> newDesc<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//4. UserB 设置成功后的处理，将 sdp 发给 UserA</span>\n<span class="token class-name">JSONObject</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">try</span> <span class="token punctuation">{</span>\n     <span class="token class-name">String</span> type <span class="token operator">=</span> <span class="token string">&quot;offer&quot;</span><span class="token punctuation">;</span>\n     <span class="token keyword">if</span> <span class="token punctuation">(</span>sdp<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token class-name">SessionDescription<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token constant">ANSWER</span><span class="token punctuation">)</span>\n         type <span class="token operator">=</span> <span class="token string">&quot;answer&quot;</span><span class="token punctuation">;</span>\n      message<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> type<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      message<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;sdp&quot;</span><span class="token punctuation">,</span> sdp<span class="token punctuation">.</span>description<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">sendMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-接收-answer-消息-并设置-userb-的-sdp-信息-1" tabindex="-1"><a class="header-anchor" href="#_6-接收-answer-消息-并设置-userb-的-sdp-信息-1" aria-hidden="true">#</a> 6. 接收 answer 消息，并设置 UserB 的 SDP 信息</h4><p>当我们收到 UserB 发来的 answer sdp 消息后告诉底层</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  mPeerConnection<span class="token punctuation">.</span><span class="token function">setRemoteDescription</span><span class="token punctuation">(</span>sdpObserver<span class="token punctuation">,</span> sdpRemote<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7-交换-ice-候选-1" tabindex="-1"><a class="header-anchor" href="#_7-交换-ice-候选-1" aria-hidden="true">#</a> 7. 交换 ICE 候选</h4><p>SDP 协商完后，UserA / UserB 交换 ice 消息，用于 nat 和转发媒体数据，如果都在局域网其实可以省略这一步</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//user A / UserB 收到 onicecandidate 回调然后将 candidate 发送给 UserB</span>\n<span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onIceCandidate</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">IceCandidate</span> iceCandidate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n                        <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;onIceCandidate: &quot;</span> <span class="token operator">+</span> iceCandidate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                            <span class="token class-name">JSONObject</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            message<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;candidate&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            message<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;label&quot;</span><span class="token punctuation">,</span> iceCandidate<span class="token punctuation">.</span>sdpMLineIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            message<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">,</span> iceCandidate<span class="token punctuation">.</span>sdpMid<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            message<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;candidate&quot;</span><span class="token punctuation">,</span> iceCandidate<span class="token punctuation">.</span>sdp<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                            mISignalClient<span class="token punctuation">.</span><span class="token function">sendSignalMessage</span><span class="token punctuation">(</span>mRoomConnectParameters<span class="token punctuation">.</span>roomId<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                        <span class="token punctuation">}</span>\n\n                    <span class="token punctuation">}</span>\n            <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">//当 UserB / UserA 接收到 UserA / UserB 的candidate 后进行添加</span>\n  mPeerConnection<span class="token punctuation">.</span><span class="token function">addIceCandidate</span><span class="token punctuation">(</span>candidate<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">AddIceObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过如上核心步骤代码，你已经完成了一个基于 <strong>WebRTC</strong> Android 版的 <strong>P2P</strong> 音视频通话系统。当然，这里展示的代码只是简化版示例，完整版的代码可以点击文末简介处有说明。</p><p>到此，你已经可以 JS &lt;--&gt;JS 、Android &lt;--&gt; Android 、JS &lt;--&gt;Android 平台下进行 P2P 的音视频通话了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>本文为你介绍了如何基于 WebRTC 实现一个 P2P 音视频通话系统，和提供了一个跨平台的实现方案，主要包括以下三个部分：</p><ol><li>服务端：使用 Node.js 和 socket.io 构建的信令服务器，负责协调通信和传递 ICE 候选、SDP 信息。</li><li>客户端(跨平台)：基于 WebRTC 的 JavaScript 客户端，实现浏览器端的音视频通话功能。</li><li>客户端：Android 客户端，使用 Google 提供的 WebRTC 库构建音视频通话应用。</li></ol><p>请注意，本文提供的代码是简化版示例，您可以根据项目需求进行扩展和优化。通过本教程，您应该对如何使用 WebRTC 构建 P2P 音视频通话系统有了更深入的了解，并能将其应用于实际项目中。</p><p>到此，P2P 音视频通话系统我们已经实现完了，下一篇我们会介绍视频会议的实现方案，尽请期待吧。</p>',66),u={},r=(0,a(3744).Z)(u,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[p,(0,t._)("ol",e,[(0,t._)("li",null,[o,(0,t._)("p",null,[(0,t.Uk)("我们可以去 "),(0,t._)("a",c,[(0,t.Uk)("trickle-ice"),(0,t.Wm)(a)]),(0,t.Uk)(" 测试网站进行测试")]),i])]),l])}]])}}]);