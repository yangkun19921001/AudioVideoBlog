"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[658],{1591:(n,a,s)=>{s.r(a),s.d(a,{data:()=>e});const e=JSON.parse('{"key":"v-62e77dfd","path":"/pages/webrtc/WebRTC%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90(%E4%B8%80)Android%E7%9B%B8%E6%9C%BA%E9%87%87%E9%9B%86.html","title":"WebRTC 源码分析 (一) Android 相机采集","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"相机采集","slug":"相机采集","link":"#相机采集","children":[{"level":3,"title":"Camera 1","slug":"camera-1","link":"#camera-1","children":[]},{"level":3,"title":"Camera2","slug":"camera2","link":"#camera2","children":[]}]},{"level":2,"title":"相机数据 native 处理","slug":"相机数据-native-处理","link":"#相机数据-native-处理","children":[]},{"level":2,"title":"相机数据预览","slug":"相机数据预览","link":"#相机数据预览","children":[]},{"level":2,"title":"实战 Demo","slug":"实战-demo","link":"#实战-demo","children":[]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"updatedTime":1689651027000,"contributors":[{"name":"make","email":"make@pplabs.org","commits":2},{"name":"make","email":"yang1001yk@gmail.com","commits":1}]},"filePathRelative":"pages/webrtc/WebRTC源码分析(一)Android相机采集.md"}')},5105:(n,a,s)=>{s.r(a),s.d(a,{default:()=>c});var e=s(6252);const t=[(0,e.uE)('<h1 id="webrtc-源码分析-一-android-相机采集" tabindex="-1"><a class="header-anchor" href="#webrtc-源码分析-一-android-相机采集" aria-hidden="true">#</a> WebRTC 源码分析 (一) Android 相机采集</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>在 <strong>WebRTC</strong> Android 中，已经兼容了 Camera 和 Camera2 原生 API 的相机采集，所以我们不必再单独实现一套采集功能。不过我们可以根据 RTC 的抽象 CameraCapturer 接口实现 CameraX (其实也是基于 Camera2的封装) 的相机采集，显然，这不是该篇的主题就不再多说了。该篇文章，主要为大家解析 WebRTC 的相机采集从 java 到 Jni 的一个调用过程。</p><p>先上一个整个调用的时序图，有条件的同学可以根据时序图来跟踪源码:</p><p>其实整个涉及到的文件还是比较多的</p><p><img src="http://devyk.top/2022/WebRTC相机采集流程.png" alt=""></p><h2 id="相机采集" tabindex="-1"><a class="header-anchor" href="#相机采集" aria-hidden="true">#</a> 相机采集</h2><p>WebRTC Android 中定义了一个抽象的视频采集接口为 <code>VideoCapturer</code> , 内部定义了 <strong>初始化(SurfaceTexture 渲染帮助类 、相机采集 VideoFrame 回调 )</strong> 、**开始/结束/释放 ** 等采集生命周期 API, 最终实现有 Camera1Capturer 和 Camera2Capturer 2 个子类。</p><p>为了有一个更清晰的一个结构，下面可以看一下 <code>VideoCapturer</code> 类图:</p><p>![](http://devyk.top/2022/相机采集 UML (1).png)</p><p>下面我们分别来介绍 webrtc 是如何来对 Camera1/2 进行创建并使用的，首先我们先看下上面的类图， 最顶层是 VideoCapturer 抽象接口</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Base interface for all VideoCapturers to implement.</span>\n<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">VideoCapturer</span> <span class="token punctuation">{</span>\n\n  <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token class-name">SurfaceTextureHelper</span> surfaceTextureHelper<span class="token punctuation">,</span> <span class="token class-name">Context</span> applicationContext<span class="token punctuation">,</span>\n      <span class="token class-name">CapturerObserver</span> capturerObserver<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">void</span> <span class="token function">startCapture</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token keyword">int</span> framerate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">void</span> <span class="token function">stopCapture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">void</span> <span class="token function">changeCaptureFormat</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token keyword">int</span> framerate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">void</span> <span class="token function">dispose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">boolean</span> <span class="token function">isScreencast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它的直接实现为 <strong>CameraVideoCapturer</strong> 然后它具体的实现是一个抽象 <strong>CameraCapturer</strong> , 该抽象类封装了 Camera1/2 公共部分，当调用 <strong>startCapture</strong> 接口，内部实现了 <strong>createCameraSession</strong> 抽象函数，以供 Camera1/2 各自进行创建 Session,可以看下下面代码的调用:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CameraCapturer</span> <span class="token keyword">implements</span> <span class="token class-name">CameraVideoCapturer</span> <span class="token punctuation">{</span>\n  \n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    \n  <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startCapture</span><span class="token punctuation">(</span><span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token keyword">int</span> framerate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n   <span class="token function">createSessionInternal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createSessionInternal</span><span class="token punctuation">(</span><span class="token keyword">int</span> delayMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    cameraThreadHandler<span class="token punctuation">.</span><span class="token function">postDelayed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token annotation punctuation">@Override</span>\n      <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">createCameraSession</span><span class="token punctuation">(</span>createSessionCallback<span class="token punctuation">,</span> cameraSessionEventsHandler<span class="token punctuation">,</span> applicationContext<span class="token punctuation">,</span>\n            surfaceHelper<span class="token punctuation">,</span> cameraName<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> framerate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> delayMs<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  \n <span class="token comment">//Camera 1 and Camera1 实现</span>\n <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">createCameraSession</span><span class="token punctuation">(</span><span class="token class-name">CameraSession<span class="token punctuation">.</span>CreateSessionCallback</span>   \tcreateSessionCallback<span class="token punctuation">,</span> <span class="token class-name">CameraSession<span class="token punctuation">.</span>Events</span> events<span class="token punctuation">,</span>\n      <span class="token class-name">Context</span> applicationContext<span class="token punctuation">,</span> <span class="token class-name">SurfaceTextureHelper</span> surfaceTextureHelper<span class="token punctuation">,</span> <span class="token class-name">String</span> cameraName<span class="token punctuation">,</span>\n      <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token keyword">int</span> framerate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="http://devyk.top/2022/WX20220904-124037.png" alt=""></p><p>可以看到最终抽象的实现就是最上面类图中的 <strong>Camera1Capturer</strong> 和 <strong>Camera2Capturer</strong> ,我们还是分别进行分析。</p><h3 id="camera-1" tabindex="-1"><a class="header-anchor" href="#camera-1" aria-hidden="true">#</a> Camera 1</h3><p>如果最上层使用 Camera1 进行 startCapture, 最终将执行到如下代码:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token class-name">Camera1Capturer</span><span class="token punctuation">(</span>\n      <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">createCameraSession</span><span class="token punctuation">(</span><span class="token class-name">CameraSession<span class="token punctuation">.</span>CreateSessionCallback</span>  createSessionCallback<span class="token punctuation">,</span>\n      <span class="token class-name">CameraSession<span class="token punctuation">.</span>Events</span> events<span class="token punctuation">,</span> <span class="token class-name">Context</span> applicationContext<span class="token punctuation">,</span>\n      <span class="token class-name">SurfaceTextureHelper</span> surfaceTextureHelper<span class="token punctuation">,</span> <span class="token class-name">String</span> cameraName<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span>\n      <span class="token keyword">int</span> framerate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n    <span class="token class-name">Camera1Session</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createSessionCallback<span class="token punctuation">,</span> events<span class="token punctuation">,</span> captureToTexture<span class="token punctuation">,</span> applicationContext<span class="token punctuation">,</span>surfaceTextureHelper<span class="token punctuation">,</span> <span class="token class-name">Camera1Enumerator</span><span class="token punctuation">.</span><span class="token function">getCameraIndex</span><span class="token punctuation">(</span>cameraName<span class="token punctuation">)</span><span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span>framerate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到函数体中具体是 Camera1Session#create 的调用，我们跟进去看一下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Camera1Session</span> <span class="token keyword">implements</span> <span class="token class-name">CameraSession</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    \n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">CreateSessionCallback</span> callback<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Events</span> events<span class="token punctuation">,</span>\n      <span class="token keyword">final</span> <span class="token keyword">boolean</span> captureToTexture<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">Context</span> applicationContext<span class="token punctuation">,</span>\n      <span class="token keyword">final</span> <span class="token class-name">SurfaceTextureHelper</span> surfaceTextureHelper<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> cameraId<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span>\n      <span class="token keyword">final</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> framerate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">final</span> <span class="token keyword">long</span> constructionTimeNs <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n    <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span></span>Camera</span> camera<span class="token punctuation">;</span>\n    camera <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span></span>Camera</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>cameraId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    camera<span class="token punctuation">.</span><span class="token function">setPreviewTexture</span><span class="token punctuation">(</span>surfaceTextureHelper<span class="token punctuation">.</span><span class="token function">getSurfaceTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span></span>Camera<span class="token punctuation">.</span>CameraInfo</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span></span>Camera<span class="token punctuation">.</span>CameraInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span></span>Camera</span><span class="token punctuation">.</span><span class="token function">getCameraInfo</span><span class="token punctuation">(</span>cameraId<span class="token punctuation">,</span> info<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">final</span> <span class="token class-name">CaptureFormat</span> captureFormat<span class="token punctuation">;</span>\n    <span class="token keyword">final</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span></span>Camera<span class="token punctuation">.</span>Parameters</span> parameters <span class="token operator">=</span> camera<span class="token punctuation">.</span><span class="token function">getParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    captureFormat <span class="token operator">=</span> <span class="token function">findClosestCaptureFormat</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> framerate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">final</span> <span class="token class-name">Size</span> pictureSize <span class="token operator">=</span> <span class="token function">findClosestPictureSize</span><span class="token punctuation">(</span>parameters<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token function">updateCameraParameters</span><span class="token punctuation">(</span>camera<span class="token punctuation">,</span> parameters<span class="token punctuation">,</span> captureFormat<span class="token punctuation">,</span> pictureSize<span class="token punctuation">,</span> captureToTexture<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>captureToTexture<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">final</span> <span class="token keyword">int</span> frameSize <span class="token operator">=</span> captureFormat<span class="token punctuation">.</span><span class="token function">frameSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token constant">NUMBER_OF_CAPTURE_BUFFERS</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">final</span> <span class="token class-name">ByteBuffer</span> buffer <span class="token operator">=</span> <span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span>frameSize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        camera<span class="token punctuation">.</span><span class="token function">addCallbackBuffer</span><span class="token punctuation">(</span>buffer<span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// Calculate orientation manually and send it as CVO insted.</span>\n    camera<span class="token punctuation">.</span><span class="token function">setDisplayOrientation</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token comment">/* degrees */</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">//内部会设置采集的 NV21 or OES 回调</span>\n    callback<span class="token punctuation">.</span><span class="token function">onDone</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Camera1Session</span><span class="token punctuation">(</span>events<span class="token punctuation">,</span> captureToTexture<span class="token punctuation">,</span> applicationContext<span class="token punctuation">,</span>\n        surfaceTextureHelper<span class="token punctuation">,</span> cameraId<span class="token punctuation">,</span> camera<span class="token punctuation">,</span> info<span class="token punctuation">,</span> captureFormat<span class="token punctuation">,</span> constructionTimeNs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>  \n<span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到这一步就是通过 Camera.open 打开摄像头，并进行帧率、采集格式、预览等一些基础设置.</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">private</span> <span class="token class-name">Camera1Session</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n\t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    surfaceTextureHelper<span class="token punctuation">.</span><span class="token function">setTextureSize</span><span class="token punctuation">(</span>captureFormat<span class="token punctuation">.</span>width<span class="token punctuation">,</span> captureFormat<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token function">startCapturing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当实例化 Camera1Session 时，会首先设置 <strong>surfaceTexture</strong> 的缓冲大小，也就是分辨率，最后是调用 <strong>this.startCapturing()</strong></p><p>在 startCapturing 实现体中，调用了 camera 的预览函数，我们一起来看下</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>\n  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">startCapturing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Logging</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Start capturing&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token function">checkIsOnCameraThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    state <span class="token operator">=</span> <span class="token class-name">SessionState</span><span class="token punctuation">.</span><span class="token constant">RUNNING</span><span class="token punctuation">;</span>\n\n\t\t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>captureToTexture<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//采集输出 OES 纹理</span>\n      <span class="token function">listenForTextureFrames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">//采集输出 YUV420sp（NV21）buf</span>\n      <span class="token function">listenForBytebufferFrames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      camera<span class="token punctuation">.</span><span class="token function">startPreview</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">stopInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      events<span class="token punctuation">.</span><span class="token function">onCameraError</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里我们统一只介绍采集 OES 纹理，在 listenForTextureFrames 函数中实现了采集的 frame 回调</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">listenForTextureFrames</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    surfaceTextureHelper<span class="token punctuation">.</span><span class="token function">startListening</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">VideoFrame</span> frame<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n      <span class="token function">checkIsOnCameraThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t\t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n      <span class="token keyword">final</span> <span class="token class-name">VideoFrame</span> modifiedFrame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VideoFrame</span><span class="token punctuation">(</span>\n          <span class="token class-name">CameraSession</span><span class="token punctuation">.</span><span class="token function">createTextureBufferWithModifiedTransformMatrix</span><span class="token punctuation">(</span>\n              <span class="token punctuation">(</span><span class="token class-name">TextureBufferImpl</span><span class="token punctuation">)</span> frame<span class="token punctuation">.</span><span class="token function">getBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n              <span class="token comment">/* mirror= */</span> info<span class="token punctuation">.</span>facing <span class="token operator">==</span> <span class="token class-name"><span class="token namespace">android<span class="token punctuation">.</span>hardware<span class="token punctuation">.</span></span>Camera<span class="token punctuation">.</span>CameraInfo</span><span class="token punctuation">.</span><span class="token constant">CAMERA_FACING_FRONT</span><span class="token punctuation">,</span>\n              <span class="token comment">/* rotation= */</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n          <span class="token comment">/* rotation= */</span> <span class="token function">getFrameOrientation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> frame<span class="token punctuation">.</span><span class="token function">getTimestampNs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      events<span class="token punctuation">.</span><span class="token function">onFrameCaptured</span><span class="token punctuation">(</span><span class="token class-name">Camera1Session</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> modifiedFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      modifiedFrame<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当接收到采集后的数据，会调用 events.onFrameCaptured 函数，后面的处理就会在 native 中了，会单独进行分析。</p><h3 id="camera2" tabindex="-1"><a class="header-anchor" href="#camera2" aria-hidden="true">#</a> Camera2</h3><p>Camera2 API 是 Android API-22 加入的，目的是为了支持更加复杂的相机使用场景，因此它的 API 使用也相较于 Camera1 复杂一些。</p><p>如果最上层使用 Camera2 进行 startCapture, 那么它的代码调用如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Camera2Capturer</span> <span class="token keyword">extends</span> <span class="token class-name">CameraCapturer</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    \n\n  <span class="token annotation punctuation">@Override</span>\n  <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">createCameraSession</span><span class="token punctuation">(</span><span class="token class-name">CameraSession<span class="token punctuation">.</span>CreateSessionCallback</span> createSessionCallback<span class="token punctuation">,</span>\n                                     <span class="token class-name">CameraSession<span class="token punctuation">.</span>Events</span> events<span class="token punctuation">,</span> <span class="token class-name">Context</span> applicationContext<span class="token punctuation">,</span>\n                                     <span class="token class-name">SurfaceTextureHelper</span> surfaceTextureHelper<span class="token punctuation">,</span> <span class="token class-name">String</span> cameraName<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span>\n                                     <span class="token keyword">int</span> framerate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token class-name">Camera2Session</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>createSessionCallback<span class="token punctuation">,</span> events<span class="token punctuation">,</span> applicationContext<span class="token punctuation">,</span> cameraManager<span class="token punctuation">,</span>\n        surfaceTextureHelper<span class="token punctuation">,</span> cameraName<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> framerate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>  \n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里与 Camera1 调用类似，具体 Camera2 使用也是在 CameraSeesion 中，代码如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">class</span> <span class="token class-name">Camera2Session</span> <span class="token keyword">implements</span> <span class="token class-name">CameraSession</span> <span class="token punctuation">{</span>\n  \n  \n  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">CreateSessionCallback</span> callback<span class="token punctuation">,</span> <span class="token class-name">Events</span> events<span class="token punctuation">,</span>\n                              <span class="token class-name">Context</span> applicationContext<span class="token punctuation">,</span> <span class="token class-name">CameraManager</span> cameraManager<span class="token punctuation">,</span>\n                              <span class="token class-name">SurfaceTextureHelper</span> surfaceTextureHelper<span class="token punctuation">,</span> <span class="token class-name">String</span> cameraId<span class="token punctuation">,</span> <span class="token keyword">int</span> width<span class="token punctuation">,</span> <span class="token keyword">int</span> height<span class="token punctuation">,</span><span class="token keyword">int</span> framerate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">new</span> <span class="token class-name">Camera2Session</span><span class="token punctuation">(</span>callback<span class="token punctuation">,</span> events<span class="token punctuation">,</span> applicationContext<span class="token punctuation">,</span> cameraManager<span class="token punctuation">,</span> surfaceTextureHelper<span class="token punctuation">,</span>cameraId<span class="token punctuation">,</span> width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> framerate<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  \n  <span class="token keyword">private</span> <span class="token class-name">Camera2Session</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>\n  <span class="token punctuation">{</span>\n    <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">checkIsOnCameraThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">Logging</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    \t\t\n        <span class="token function">findCaptureFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">openCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面 start 主要是找到相机的采集格式，比如找到采集的 fps 范围，采集的分辨率等，还有采集的颜色格式（统一是 NV21）,最后是通过 openCamera 打开摄像头</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@SuppressLint</span><span class="token punctuation">(</span><span class="token string">&quot;MissingPermission&quot;</span><span class="token punctuation">)</span>\n    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">openCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">checkIsOnCameraThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token class-name">Logging</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Opening camera &quot;</span> <span class="token operator">+</span> cameraId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        events<span class="token punctuation">.</span><span class="token function">onCameraOpening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            cameraManager<span class="token punctuation">.</span><span class="token function">openCamera</span><span class="token punctuation">(</span>cameraId<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CameraStateCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cameraThreadHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CameraAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">reportError</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to open camera: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 mCameraManager#openCamera 传入摄像头的 id 和 Camera 状态回调。调用之后，成功与失败就会执行到该接口中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">StateCallback</span> <span class="token punctuation">{</span>\n  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onOpened</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">CameraDevice</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onClosed</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">CameraDevice</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onDisconnected</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">CameraDevice</span> camera<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">onError</span><span class="token punctuation">(</span><span class="token annotation punctuation">@NonNull</span> <span class="token class-name">CameraDevice</span> camera<span class="token punctuation">,</span>\n                <span class="token annotation punctuation">@ErrorCode</span> <span class="token keyword">int</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当打开成功就会执行到 #onOpened 函数中，我们看下具体打开成功后的操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onOpened</span><span class="token punctuation">(</span><span class="token class-name">CameraDevice</span> camera<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">checkIsOnCameraThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            <span class="token class-name">Logging</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Camera opened.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            cameraDevice <span class="token operator">=</span> camera<span class="token punctuation">;</span>\n\n            surfaceTextureHelper<span class="token punctuation">.</span><span class="token function">setTextureSize</span><span class="token punctuation">(</span>captureFormat<span class="token punctuation">.</span>width<span class="token punctuation">,</span> captureFormat<span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            surface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Surface</span><span class="token punctuation">(</span>surfaceTextureHelper<span class="token punctuation">.</span><span class="token function">getSurfaceTexture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                camera<span class="token punctuation">.</span><span class="token function">createCaptureSession</span><span class="token punctuation">(</span>\n                        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>surface<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CaptureSessionCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cameraThreadHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CameraAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">reportError</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to create capture session. &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到，在该函数中主要设置启动预览，用的是 SurfaceTexture 进行接收数据，当调用 camera.createCaptureSession 之后会将创建的状态回调给 <strong>CameraCaptureSession.StateCallback</strong> 的子类，也就是第二个参数 new CaptureSessionCallback(), 当创建成功之后，会执行 onConfigured 回调，最后会在该回调中进行设置帧率，和关联 surface 和设置采集的回调(OES)。有一点需要注意一下，采集的宽高不是直接设置给 CameraDevice 的，而是设置给 SurfaceTexture 的。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onConfigured</span><span class="token punctuation">(</span><span class="token class-name">CameraCaptureSession</span> session<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n surfaceTextureHelper<span class="token punctuation">.</span><span class="token function">startListening</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">VideoFrame</span> frame<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n     <span class="token comment">//将采集到的相机 OES 纹理回调出去</span>\n     events<span class="token punctuation">.</span><span class="token function">onFrameCaptured</span><span class="token punctuation">(</span><span class="token class-name">Camera2Session</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> modifiedFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n <span class="token punctuation">}</span>\n <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里之后，Camera1 和 Camera2 的处理流程是一样的了，下面会统一介绍。</p><p>到这里主要采集的工作已经完成了，我们总结下 Camera1和Camera2 的流程吧:</p><p><strong>Camera1:</strong></p><ol><li>通过 Camera.open 实例化</li><li>通过 camera.setPreviewTexture 设置预览 SurfaceTexture , 主要是用来接收帧数据.</li><li>通过 camera.setParameters 设置相机预览的参数，比如帧率、分辨率等</li><li>通过 camera.setDisplayOrientation 设置预览的方向</li><li>通过 camera.startPreview/stopPreview/release 设置预览的生命周期</li></ol><p><strong>Camera2:</strong></p><ol><li>通过 getSystemService(Context.CAMERA_SERVICE) 创建相机管理类</li><li>通过 mCameraManager.openCamera 创建 CameraDevice ，并设置创建的状态回调</li><li>通过 CameraDevice.StateCallback#onOpened 接收创建成功的回调，通过 camera.createCaptureSession 开启预览的 session,并设置 create 的回调。</li><li>通过 CameraCaptureSession.StateCallback#onConfigured 来接收上一步设置的session 状态回调，最后是通过 session.setRepeatingRequest 来设置采集的数据格式</li><li>通过 cameraCaptureSession.stop 和 cameraDevice.close 来停止 Camera2 的预览</li></ol><h2 id="相机数据-native-处理" tabindex="-1"><a class="header-anchor" href="#相机数据-native-处理" aria-hidden="true">#</a> 相机数据 native 处理</h2><p>上一小节我们分析到了 <strong>events.onFrameCaptured(Camera2Session.this, modifiedFrame);</strong> 该回调会执行到</p><p><strong>CameraCapturer#onFrameCaptured</strong> 函数中，最后调用 <strong>capturerObserver.onFrameCaptured(frame);</strong> 会执行到 <strong>VideoSource#onFrameCaptured</strong> 函数，如下代码所示:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>   <span class="token comment">//CameraCapturer.java</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFrameCaptured</span><span class="token punctuation">(</span><span class="token class-name">CameraSession</span> session<span class="token punctuation">,</span> <span class="token class-name">VideoFrame</span> frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">checkIsOnCameraThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>stateLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n        capturerObserver<span class="token punctuation">.</span><span class="token function">onFrameCaptured</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token comment">//VideoSource.java</span>\n    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFrameCaptured</span><span class="token punctuation">(</span><span class="token class-name">VideoFrame</span> frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">final</span> <span class="token class-name">VideoProcessor<span class="token punctuation">.</span>FrameAdaptationParameters</span> parameters <span class="token operator">=</span>\n          nativeAndroidVideoTrackSource<span class="token punctuation">.</span><span class="token function">adaptFrame</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>videoProcessorLock<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>videoProcessor <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          videoProcessor<span class="token punctuation">.</span><span class="token function">onFrameCaptured</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> parameters<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token class-name">VideoFrame</span> adaptedFrame <span class="token operator">=</span> <span class="token class-name">VideoProcessor</span><span class="token punctuation">.</span><span class="token function">applyFrameAdaptationParameters</span><span class="token punctuation">(</span>frame<span class="token punctuation">,</span> \tparameters<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>adaptedFrame <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        nativeAndroidVideoTrackSource<span class="token punctuation">.</span><span class="token function">onFrameCaptured</span><span class="token punctuation">(</span>adaptedFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        adaptedFrame<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//NativeAndroidVideoTrackSource.java</span>\n\n  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">native</span> <span class="token keyword">void</span> <span class="token function">nativeOnFrameCaptured</span><span class="token punctuation">(</span>\n      <span class="token keyword">long</span> nativeAndroidVideoTrackSource<span class="token punctuation">,</span> <span class="token keyword">int</span> rotation<span class="token punctuation">,</span> <span class="token keyword">long</span> timestampNs<span class="token punctuation">,</span> <span class="token class-name">VideoFrame<span class="token punctuation">.</span>Buffer</span> buffer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这里，就会将采集到的数据 VideoFrame 包装类，传递到 NativeAndroidVideoTrackSource_jni.h 代码中, 接着会把 nativeAndroidVideoTrackSource 指针地址转为 Native 端的 AndroidVideoTrackSource class,再调用内部的 OnFrameCaptured 函数，详细代码如下:</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>JNI_GENERATOR_EXPORT void Java_org_webrtc_NativeAndroidVideoTrackSource_nativeOnFrameCaptured(\n    JNIEnv* env,\n    jclass jcaller,\n    jlong nativeAndroidVideoTrackSource,\n    jint rotation,\n    jlong timestampNs,\n    jobject buffer) {\n  AndroidVideoTrackSource* native =\n      reinterpret_cast&lt;AndroidVideoTrackSource*&gt;(nativeAndroidVideoTrackSource);\n  CHECK_NATIVE_PTR(env, jcaller, native, &quot;OnFrameCaptured&quot;);\n  return native-&gt;OnFrameCaptured(env, rotation, timestampNs,\n      base::android::JavaParamRef&lt;jobject&gt;(env, buffer));\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当执行到内部的 OnFrameCaptured 函数，代码如下:</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>void AndroidVideoTrackSource::OnFrameCaptured(\n    JNIEnv* env,\n    jint j_rotation,\n    jlong j_timestamp_ns,\n    const JavaRef&lt;jobject&gt;&amp; j_video_frame_buffer) {\n  rtc::scoped_refptr&lt;VideoFrameBuffer&gt; buffer =\n      AndroidVideoBuffer::Create(env, j_video_frame_buffer);\n  //转为 c++ 枚举\n  const VideoRotation rotation = jintToVideoRotation(j_rotation);\n\n  // AdaptedVideoTrackSource handles applying rotation for I420 frames.\n  //这里主要是处理 I420 数据的旋转\n  if (apply_rotation() &amp;&amp; rotation != kVideoRotation_0)\n    buffer = buffer-&gt;ToI420();\n  //调用当前的 OnFrame 函数\n  OnFrame(VideoFrame::Builder()\n              .set_video_frame_buffer(buffer)\n              .set_rotation(rotation)\n              .set_timestamp_us(j_timestamp_ns / rtc::kNumNanosecsPerMicrosec)\n              .build());\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用 OnFrame 后的代码</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>void AdaptedVideoTrackSource::OnFrame(const webrtc::VideoFrame&amp; frame) {\n  rtc::scoped_refptr&lt;webrtc::VideoFrameBuffer&gt; buffer(\n      frame.video_frame_buffer());\n  if (apply_rotation() &amp;&amp; frame.rotation() != webrtc::kVideoRotation_0 &amp;&amp;\n      buffer-&gt;type() == webrtc::VideoFrameBuffer::Type::kI420) {\n    /* Apply pending rotation. */\n    webrtc::VideoFrame rotated_frame(frame);\n    //内部调用 libyuv 进行处理旋转\n    rotated_frame.set_video_frame_buffer(\n        webrtc::I420Buffer::Rotate(*buffer-&gt;GetI420(), frame.rotation()));\n    rotated_frame.set_rotation(webrtc::kVideoRotation_0);\n    broadcaster_.OnFrame(rotated_frame);\n  } else {\n    broadcaster_.OnFrame(frame);\n  }\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因为我们这里是 OES 纹理，并且也不会处理旋转，所以直接走 <code>else ,VideoBroadcaster#OnFrame 函数，在这里会遍历 std::vector&lt;SinkPair&gt;</code>，然后调用对应 sink 的 OnFrame 进行处理.</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>\nvoid VideoBroadcaster::OnFrame(const webrtc::VideoFrame&amp; frame) {\n  rtc::CritScope cs(&amp;sinks_and_wants_lock_);\n  bool current_frame_was_discarded = false;\n  for (auto&amp; sink_pair : sink_pairs()) {\n\t\t...\n    if (sink_pair.wants.black_frames) {\n      webrtc::VideoFrame black_frame =\n          webrtc::VideoFrame::Builder()\n              .set_video_frame_buffer(\n                  GetBlackFrameBuffer(frame.width(), frame.height()))\n              .set_rotation(frame.rotation())\n              .set_timestamp_us(frame.timestamp_us())\n              .set_id(frame.id())\n              .build();\n      sink_pair.sink-&gt;OnFrame(black_frame);\n    } else if (!previous_frame_sent_to_all_sinks_ &amp;&amp; frame.has_update_rect()) {\n      webrtc::VideoFrame copy = frame;\n      copy.clear_update_rect();\n      sink_pair.sink-&gt;OnFrame(copy);\n    } else {\n      sink_pair.sink-&gt;OnFrame(frame);\n    }\n  }\n\n}\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过 debug 我们可以知道，内部有 2 个 sink,一个是 VideoSinkWrapper 另一个是 VideoStreamEncoder</p><p><img src="http://devyk.top/2022/WechatIMG40.png" alt=""></p><p>该篇不会涉及编码相关介绍，所以先忽略这个指针吧</p><p><img src="http://devyk.top/2022/WX20220904-171707.png" alt=""></p><p>我们跟进 VideoSinkWrapper#OnFrame 去看看</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>#video_sink.cc\nvoid VideoSinkWrapper::OnFrame(const VideoFrame&amp; frame) {\n  JNIEnv* jni = AttachCurrentThreadIfNeeded();\n  //1. 主要将 Native 中的 VideoFrame 实例化为 Java 端的 VideoFrame\n  ScopedJavaLocalRef&lt;jobject&gt; j_frame = NativeToJavaVideoFrame(jni, frame);\n  //2. \n  Java_VideoSink_onFrame(jni, j_sink_, j_frame);\n  //3. \n  ReleaseJavaVideoFrame(jni, j_frame);\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们直接看第二步把，这一步其实就是把 VideoFrame 通过 JNIEnv#CallVoidMethod 回调给 Java 端,代码如下</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>static void Java_VideoSink_onFrame(JNIEnv* env, const base::android::JavaRef&lt;jobject&gt;&amp; obj, const\n    base::android::JavaRef&lt;jobject&gt;&amp; frame) {\n  //拿到 &quot;org/webrtc/VideoSink&quot; Java的 claszz\n  jclass clazz = org_webrtc_VideoSink_clazz(env);\n  CHECK_CLAZZ(env, obj.obj(),\n      org_webrtc_VideoSink_clazz(env));\n\n  jni_generator::JniJavaCallContextChecked call_context;\n  call_context.Init&lt;\n      base::android::MethodID::TYPE_INSTANCE&gt;(\n          env,\n          clazz,\n          &quot;onFrame&quot;,\n          &quot;(Lorg/webrtc/VideoFrame;)V&quot;,\n          &amp;g_org_webrtc_VideoSink_onFrame);\n\n     env-&gt;CallVoidMethod(obj.obj(),\n          call_context.base.method_id, frame.obj());\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>看到 <strong>CallVoidMethod</strong> 是不是感觉特亲切了，它的第一个参数就是回调给 java 具体的对象，第二个参数就是回调给对象中的具体函数，第三个传参的数据类型。</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code> void CallVoidMethod(jobject obj, jmethodID methodID, ...)\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>第一个参数 obj 我们预览的时候再进行说明，第二个参数可以通过上面的代码得知，它是 <strong>onFrame</strong> 函数，参数签名为 <strong>&quot;(Lorg/webrtc/VideoFrame;)V&quot;</strong> ，后面传递的参数就是 VideoFrame。</p><p>到这里 jni 处理采集到的相机数据就处理完了，其实采集 java -&gt; jni -&gt; java 中间部分就通过 libyuv处理了下 I420 的旋转，如果不处理旋转的话，就直接再回调给 java 即可。</p><h2 id="相机数据预览" tabindex="-1"><a class="header-anchor" href="#相机数据预览" aria-hidden="true">#</a> 相机数据预览</h2><p>上一小节我们留了一个问题，就是 <strong>env-&gt;CallVoidMethod(obj.obj(), call_context.base.method_id, frame.obj());</strong> 的第一个参数这个 obj 具体是哪个类的，我们先来到 CallActivity.java 的 <strong>onConnectedToRoomInternal</strong> 函数这个函数的回调就是代表 WebSocket 连接成功并且进入到了视频通话房间中。我们具体看下该函数的实现:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//CallActivity.java</span>\n<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ProxyVideoSink</span> remoteProxyRenderer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyVideoSink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ProxyVideoSink</span> localProxyVideoSink <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyVideoSink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">VideoSink</span><span class="token punctuation">&gt;</span></span> remoteSinks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nremoteSinks<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>remoteProxyRenderer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">ProxyVideoSink</span> <span class="token keyword">implements</span> <span class="token class-name">VideoSink</span> <span class="token punctuation">{</span>\n        <span class="token keyword">private</span> <span class="token class-name">VideoSink</span> target<span class="token punctuation">;</span>\n\n        <span class="token annotation punctuation">@Override</span>\n        <span class="token keyword">synchronized</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFrame</span><span class="token punctuation">(</span><span class="token class-name">VideoFrame</span> frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">Logging</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token constant">TAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Dropping frame in proxy because target is null.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">//本地纹理</span>\n            target<span class="token punctuation">.</span><span class="token function">onFrame</span><span class="token punctuation">(</span>frame<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">synchronized</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTarget</span><span class="token punctuation">(</span><span class="token class-name">VideoSink</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">onConnectedToRoomInternal</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">SignalingParameters</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">final</span> <span class="token keyword">long</span> delta <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> callStartedTimeMs<span class="token punctuation">;</span>\n\n        signalingParameters <span class="token operator">=</span> params<span class="token punctuation">;</span>\n        <span class="token function">logAndToast</span><span class="token punctuation">(</span><span class="token string">&quot;Creating peer connection, delay=&quot;</span> <span class="token operator">+</span> delta <span class="token operator">+</span> <span class="token string">&quot;ms&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token class-name">VideoCapturer</span> videoCapturer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>peerConnectionParameters<span class="token punctuation">.</span>videoCallEnabled<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">//第一步</span>\n            videoCapturer <span class="token operator">=</span> <span class="token function">createVideoCapturer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//第二步</span>\n        peerConnectionClient<span class="token punctuation">.</span><span class="token function">createPeerConnection</span><span class="token punctuation">(</span>\n                localProxyVideoSink<span class="token punctuation">,</span> remoteSinks<span class="token punctuation">,</span> videoCapturer<span class="token punctuation">,</span> signalingParameters<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token punctuation">}</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>P2P 建联媒体协商，这里就不再说明了，因为不是该篇的内容。我们先看第一步，可以发现 createVideoCapturer 返回值就是 <strong>VideoCapturer</strong> 相机采集的基类，跟第一小节的 VideoCapturer 给对应上了，接着往下看，这里会调用 PeerConnectionClient#createPeerConnection 函数，会把本地的 VideoSink和远端的 VideoSink 给传递过去，具体代码如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token comment">//PeerConnectionClient.java</span>\n <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createPeerConnection</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">VideoSink</span> localRender<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">VideoSink</span><span class="token punctuation">&gt;</span></span> remoteSinks<span class="token punctuation">,</span>\n      <span class="token keyword">final</span> <span class="token class-name">VideoCapturer</span> videoCapturer<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">SignalingParameters</span> signalingParameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>localRender <span class="token operator">=</span> localRender<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>remoteSinks <span class="token operator">=</span> remoteSinks<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>videoCapturer <span class="token operator">=</span> videoCapturer<span class="token punctuation">;</span>\n    \n    executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n        <span class="token function">createPeerConnectionInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">reportError</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to create peer connection: &quot;</span> <span class="token operator">+</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">throw</span> e<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们只分析关键位置，继续执行到 createPeerConnectionInternal 函数内部中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token comment">//PeerConnectionClient.java</span>\n  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">createPeerConnectionInternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isVideoCallEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      peerConnection<span class="token punctuation">.</span><span class="token function">addTrack</span><span class="token punctuation">(</span><span class="token function">createVideoTrack</span><span class="token punctuation">(</span>videoCapturer<span class="token punctuation">)</span><span class="token punctuation">,</span> mediaStreamLabels<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\t\t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token punctuation">}</span>  \n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    \n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>已经快接近真像了，再坚持一下. 我们先看一下 createVideoTrack 具体实现，代码如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//PeerConnectionClient.java</span>\n  <span class="token annotation punctuation">@Nullable</span>\n  <span class="token keyword">private</span> <span class="token class-name">VideoTrack</span> <span class="token function">createVideoTrack</span><span class="token punctuation">(</span><span class="token class-name">VideoCapturer</span> capturer<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//第一步</span>\n    surfaceTextureHelper <span class="token operator">=</span>\n        <span class="token class-name">SurfaceTextureHelper</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">&quot;CaptureThread&quot;</span><span class="token punctuation">,</span> rootEglBase<span class="token punctuation">.</span><span class="token function">getEglBaseContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    videoSource <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createVideoSource</span><span class="token punctuation">(</span>capturer<span class="token punctuation">.</span><span class="token function">isScreencast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//第二步</span>\n    capturer<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span>surfaceTextureHelper<span class="token punctuation">,</span> appContext<span class="token punctuation">,</span> videoSource<span class="token punctuation">.</span><span class="token function">getCapturerObserver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    capturer<span class="token punctuation">.</span><span class="token function">startCapture</span><span class="token punctuation">(</span>videoWidth<span class="token punctuation">,</span> videoHeight<span class="token punctuation">,</span> videoFps<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    localVideoTrack <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">createVideoTrack</span><span class="token punctuation">(</span><span class="token constant">VIDEO_TRACK_ID</span><span class="token punctuation">,</span> videoSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    localVideoTrack<span class="token punctuation">.</span><span class="token function">setEnabled</span><span class="token punctuation">(</span>renderVideo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//第三步</span>\n    localVideoTrack<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>localRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> localVideoTrack<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个函数代码比较核心，我们分为 3 个步骤进行分析</p><p>先来看第一步，首先是通过 SurfaceTextureHelper.create 创建一个 <strong>SurfaceTextureHelper</strong> 。在第一小节我们已经发现它的影子了，当时没有介绍它。就是等这一刻来介绍。</p><p>当调用 create 的时候，内部会进行实例化该对象，最终会执行到构造函数，我们看下具体实现，代码如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>  <span class="token keyword">private</span> <span class="token class-name">SurfaceTextureHelper</span><span class="token punctuation">(</span><span class="token class-name">Context</span> sharedContext<span class="token punctuation">,</span> <span class="token class-name">Handler</span> handler<span class="token punctuation">,</span> <span class="token keyword">boolean</span> alignTimestamps<span class="token punctuation">,</span>\n      <span class="token class-name">YuvConverter</span> yuvConverter<span class="token punctuation">,</span> <span class="token class-name">FrameRefMonitor</span> frameRefMonitor<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">//判断线程</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>handler<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token punctuation">}</span>\n      <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token comment">//在 CaptureThread 线程中创建 EGL 环境</span>\n    eglBase <span class="token operator">=</span> <span class="token class-name">EglBase</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>sharedContext<span class="token punctuation">,</span> <span class="token class-name">EglBase</span><span class="token punctuation">.</span><span class="token constant">CONFIG_PIXEL_BUFFER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">try</span> <span class="token punctuation">{</span>\n      eglBase<span class="token punctuation">.</span><span class="token function">createDummyPbufferSurface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      eglBase<span class="token punctuation">.</span><span class="token function">makeCurrent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      eglBase<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      handler<span class="token punctuation">.</span><span class="token function">getLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token keyword">throw</span> e<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\t\t\n    <span class="token comment">//OES 纹理id 生成的核心代码</span>\n    oesTextureId <span class="token operator">=</span> <span class="token class-name">GlUtil</span><span class="token punctuation">.</span><span class="token function">generateTexture</span><span class="token punctuation">(</span><span class="token class-name">GLES11Ext</span><span class="token punctuation">.</span><span class="token constant">GL_TEXTURE_EXTERNAL_OES</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//创建 SurfaceTexture 对象，传入纹理 id</span>\n    surfaceTexture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SurfaceTexture</span><span class="token punctuation">(</span>oesTextureId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token comment">//设置渲染的回调，调用 updateTexImage 执行</span>\n    <span class="token function">setOnFrameAvailableListener</span><span class="token punctuation">(</span>surfaceTexture<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">SurfaceTexture</span> st<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n      hasPendingTexture <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n      <span class="token comment">//相机机数据可用时就会进行回调，然后就将采集到数据回调给 设置 SurfaceTextureHelper#startListening 处</span>\n      <span class="token function">tryDeliverTextureFrame</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token annotation punctuation">@TargetApi</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>\n  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setOnFrameAvailableListener</span><span class="token punctuation">(</span><span class="token class-name">SurfaceTexture</span> surfaceTexture<span class="token punctuation">,</span>\n      <span class="token class-name">SurfaceTexture<span class="token punctuation">.</span>OnFrameAvailableListener</span> listener<span class="token punctuation">,</span> <span class="token class-name">Handler</span> handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION</span><span class="token punctuation">.</span><span class="token constant">SDK_INT</span> <span class="token operator">&gt;=</span> <span class="token class-name">Build</span><span class="token punctuation">.</span><span class="token constant">VERSION_CODES</span><span class="token punctuation">.</span><span class="token constant">LOLLIPOP</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      surfaceTexture<span class="token punctuation">.</span><span class="token function">setOnFrameAvailableListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      surfaceTexture<span class="token punctuation">.</span><span class="token function">setOnFrameAvailableListener</span><span class="token punctuation">(</span>listener<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>总结一下上面的代码作用，首先是创建 EGL 环境，然后通过 GL ES 创建一个 OES ID 纹理，将这个纹理传递给创建好的 SurfaceTexture 对象，最后是设置采集到的帧回调，如果有数据就会回调给如下代码:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> surfaceTextureHelper<span class="token punctuation">.</span><span class="token function">startListening</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">VideoFrame</span> frame<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n  events<span class="token punctuation">.</span><span class="token function">onFrameCaptured</span><span class="token punctuation">(</span><span class="token class-name">Camera1Session</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> modifiedFrame<span class="token punctuation">)</span><span class="token punctuation">;</span>\n <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该处代码也与上一小节给对应上了。</p><p>我们继续看 createVideoTrack 代码的第二部分:</p><p>首先调用 VideoCapturer#initialize 初始化函数，其次是调用 VideoCapturer#startCapture 开始采集的函数，该处也与上一小节给对应上了。</p><p>我们来看 createVideoTrack 代码的第三部分:</p><p>我们传入了 本地预览的 VideoSink</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>localVideoTrack<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>localRender<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>继续跟一下 addSink,</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//VideoTrack.java</span>\n\n  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addSink</span><span class="token punctuation">(</span><span class="token class-name">VideoSink</span> sink<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>sinks<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>sink<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">//1.</span>\n      <span class="token keyword">final</span> <span class="token keyword">long</span> nativeSink <span class="token operator">=</span> <span class="token function">nativeWrapSink</span><span class="token punctuation">(</span>sink<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      sinks<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>sink<span class="token punctuation">,</span> nativeSink<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token comment">//2.</span>\n      <span class="token function">nativeAddSink</span><span class="token punctuation">(</span><span class="token function">getNativeMediaStreamTrack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nativeSink<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第一步是一个 native 函数，它的实现在 <strong>VideoTrack_jni.h</strong> 处，我们跟一下代码</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>JNI_GENERATOR_EXPORT jlong Java_org_webrtc_VideoTrack_nativeWrapSink(\n    JNIEnv* env,\n    jclass jcaller,\n    jobject sink) {\n  return JNI_VideoTrack_WrapSink(env, base::android::JavaParamRef&lt;jobject&gt;(env, sink));\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继续跟</p><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>//video_track.cc\nstatic jlong JNI_VideoTrack_WrapSink(JNIEnv* jni,\n                                     const JavaParamRef&lt;jobject&gt;&amp; sink) {\n  return jlongFromPointer(new VideoSinkWrapper(jni, sink));\n}\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>咦，我们发现上一小节的相机数据 native 处理好像也用到了 <strong>VideoSinkWrapper</strong> 类，我们继续看一下这个实例化对象做了什么</p><p>![image-20220904185544097](/Users/devyk/Library/Application Support/typora-user-images/image-20220904185544097.png)</p><p>通过上图标注 1 处，我们发现实例化该对象只是赋值了从 java 端传递过来的 <strong>ProxyVideoSink</strong> 。该 sink 就是接收采集到渲染的数据。</p><p>第二处就是执行在 ProxyVideoSink 中的 onFrame 函数，将 VideoFrame 给回调给 java 。所以这整个采集流程到渲染起始处都已经结合起来了，后面具体的渲染就是 SurfaceViewRenderer 了，通过 OpenGL ES 来渲染。就不详细来分析了。</p><h2 id="实战-demo" tabindex="-1"><a class="header-anchor" href="#实战-demo" aria-hidden="true">#</a> 实战 Demo</h2><p>我把相机采集的代码从 WebRTC 中抽出来了，感兴趣的可以 clone 下来看看。</p><p>地址: https://github.com/yangkun19921001/WebRTCSample</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>该篇文章详细的分析了 Camera1/2 的整个采集流程，有条件的建议 debug webrtc 源码来看。如果大家不会在 MACOS 下 debug webrtc 我后续可以出一篇如何在 MACOS 下搭建 webrtc 调试环境。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><ul><li>《WebRTC Native 开发实战》</li></ul>',113)],p={},c=(0,s(3744).Z)(p,[["render",function(n,a){return(0,e.wg)(),(0,e.iD)("div",null,t)}]])}}]);