"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[134],{4649:(e,i,l)=>{l.r(i),l.d(i,{data:()=>r});const r=JSON.parse('{"key":"v-c193d65e","path":"/pages/webrtc/WebRTC%20P2P%20%E4%BB%8E%E5%8E%9F%E7%90%86%E5%88%B0%E5%BA%94%E7%94%A8.html","title":"WebRTC P2P 原理分析：从原理到应用","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"一、WebRTC P2P 通信原理","slug":"一、webrtc-p2p-通信原理","link":"#一、webrtc-p2p-通信原理","children":[{"level":3,"title":"1. 基本组件","slug":"_1-基本组件","link":"#_1-基本组件","children":[]},{"level":3,"title":"2. 信令流程","slug":"_2-信令流程","link":"#_2-信令流程","children":[]},{"level":3,"title":"3. NAT 穿透和 STUN/TURN 服务器","slug":"_3-nat-穿透和-stun-turn-服务器","link":"#_3-nat-穿透和-stun-turn-服务器","children":[]}]},{"level":2,"title":"二、WebRTC应用场景","slug":"二、webrtc应用场景","link":"#二、webrtc应用场景","children":[{"level":3,"title":"实时音视频通信：","slug":"实时音视频通信","link":"#实时音视频通信","children":[]},{"level":3,"title":"实时数据传输和文件共享：","slug":"实时数据传输和文件共享","link":"#实时数据传输和文件共享","children":[]},{"level":3,"title":"实时媒体流处理：","slug":"实时媒体流处理","link":"#实时媒体流处理","children":[]},{"level":3,"title":"物联网（IoT）和边缘计算：","slug":"物联网-iot-和边缘计算","link":"#物联网-iot-和边缘计算","children":[]},{"level":3,"title":"社交网络：","slug":"社交网络","link":"#社交网络","children":[]}]},{"level":2,"title":"三、总结","slug":"三、总结","link":"#三、总结","children":[]}],"git":{"updatedTime":1689519943000,"contributors":[{"name":"make","email":"yang1001yk@gmail.com","commits":1}]},"filePathRelative":"pages/webrtc/WebRTC P2P 从原理到应用.md"}')},871:(e,i,l)=>{l.r(i),l.d(i,{default:()=>n});var r=l(6252);const t=[(0,r.uE)('<h1 id="webrtc-p2p-原理分析-从原理到应用" tabindex="-1"><a class="header-anchor" href="#webrtc-p2p-原理分析-从原理到应用" aria-hidden="true">#</a> WebRTC P2P 原理分析：从原理到应用</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p><img src="http://devyk.top/2022/202303212336298.png" alt=""></p><p>WebRTC（Web Real-Time Communication）是一项开源的技术，旨在实现实时音视频以及数据通信，而无需安装任何插件或扩展。WebRTC 允许用户之间通过 P2P（Peer-to-Peer）模式进行实时通信，减轻服务器的负担并提高通信效率。本文将对 WebRTC P2P 通信原理进行详细分析，并探讨其在各种应用场景中的实际应用。</p><h2 id="一、webrtc-p2p-通信原理" tabindex="-1"><a class="header-anchor" href="#一、webrtc-p2p-通信原理" aria-hidden="true">#</a> 一、WebRTC P2P 通信原理</h2><h3 id="_1-基本组件" tabindex="-1"><a class="header-anchor" href="#_1-基本组件" aria-hidden="true">#</a> 1. 基本组件</h3><p>WebRTC P2P 由以下几个主要组件组成：</p><ol><li><strong>Camera 和 AudioRecord</strong>：通过 Camera（Camera1 或 Camera2）和 AudioRecord 类访问音视频设备。处理 Android 设备的权限请求，以便访问摄像头和麦克风。</li><li><strong>PeerConnectionFactory</strong>：创建 RTCPeerConnection 和 RTCDataChannel 实例的核心类。</li><li><strong>RTCPeerConnection</strong>：实现 P2P 通信，处理音视频编解码、网络通信等。负责处理信令过程、交换媒体信息以及协调 NAT 穿透。</li><li><strong>RTCDataChannel</strong>：用于在 P2P 通信中传输非音视频数据，如文字、图片、文件等。实现低延迟、可靠的数据通信通道。</li><li><strong>VideoTrack 和 AudioTrack</strong>：代表视频轨道和音频轨道。操作音视频流，例如添加到 RTCPeerConnection 中，实现音视频的传输。</li><li><strong>VideoRenderer</strong>：用于显示远端视频流。为本地和远端视频流分别创建 VideoRenderer 实例，如 SurfaceViewRenderer 或 TextureViewRenderer。将视频流渲染到 Android 界面上。</li><li><strong>EglBase</strong>：在渲染视频时，可能需要使用 EglBase 类。EglBase 提供了 OpenGL ES 上下文，用于渲染视频到 Android 视图（如 SurfaceViewRenderer 或 TextureViewRenderer）中。</li><li><strong>音频编解码器</strong>：WebRTC 支持多种音频编解码器，如 Opus、G.711、iSAC 等。根据 SDP 信息自动选择合适的编解码器。</li><li><strong>视频编解码器</strong>：WebRTC 支持多种视频编解码器，如 VP8、VP9、H.264 等。根据 SDP 信息自动选择合适的编解码器。</li><li><strong>编解码器设置与优化</strong>：在特定场景下，可能需要对编解码器的参数进行调整，以获得更好的音视频质量或降低带宽占用。例如，调整视频编码器的分辨率、帧率、码率等参数。</li><li><strong>硬件编解码器支持</strong>：在 Android 平台上，可以使用 MediaCodec 进行硬件编解码。并且使用硬件编解码器可以显著降低 CPU 占用，大大提高编解码性能。</li><li><strong>ICE（Interactive Connectivity Establishment）</strong>：处理网络协议，用于在复杂的网络环境中建立 P2P 连接。协助 WebRTC 客户端在 NAT 和防火墙等环境中找到可用的通信路径。</li><li><strong>STUN（Session Traversal Utilities for NAT）</strong>：STUN 服务器帮助 WebRTC 客户端获取公网 IP 地址和端口，以便在 NAT 环境中建立 P2P 连接。STUN 服务器通过向 WebRTC 客户端返回其公网地址，使客户端能够在信令过程中交换这些信息。</li><li><strong>TURN（Traversal Using Relays around NAT）</strong>：当 STUN 服务器无法建立直接的 P2P 连接时，TURN 服务器充当中继，将客户端的数据中转至另一个客户端。虽然这会增加通信延迟，但能确保通信成功。TURN 服务器通常与 STUN 服务器一起部署，作为 WebRTC NAT 穿透的备选方案。</li></ol><p>通过这些组件，你可以在 Android 平台上实现 WebRTC P2P 通信，包括音视频和数据传输。这些组件共同构成了 WebRTC 在 Android 端的基础设施，可以帮助你实现高效、稳定的实时通信应用</p><h3 id="_2-信令流程" tabindex="-1"><a class="header-anchor" href="#_2-信令流程" aria-hidden="true">#</a> 2. 信令流程</h3><p>WebRTC 不包含信令协议，因此需要开发者根据需求自定义信令过程。信令主要用于协调双方建立 P2P 连接、交换音视频编码信息、网络地址等。以下是一个典型的信令流程：</p><p><img src="http://devyk.top/2022/202303221325023.png" alt=""></p><ol><li>UserA 连接信令服务器并返回连接成功的响应。</li><li>UserA 发送加入房间的信令并返回加入成功的响应。</li><li>UserA 创建 PeerConnection 和添加音视轨道。</li><li>UserB 连接信令服务器并返回连接成功的响应。</li><li>UserB 发送加入房间的信令并返回加入成功的响应。</li><li>UserB 创建 PeerConnection 和添加音视轨道。</li><li>信令服务器通知 UserA， UserB 加入到了房间中。</li><li>UserA 调用 createOffer() 方法生成一个 SDP（Session Description Protocol）描述，包含 UserA 的音视频编信息和网络地址。</li><li>UserA 发送 SDP 描述给信令服务器，然后转发给 UserB。</li><li>UserB 接收到 UserA 的 SDP 描述，并调用 setRemoteDescription() 设置为远端描述。</li><li>UserB 调用 createAnswer() 方法生成一个 SDP 描述，包含 UserB 的音视频编码信息和网络地址。</li><li>UserB 发送 ANSWER SDP 描述给 信令服务器 ，然后转发给 UserA。</li><li>UserA 接收到 UserB 的 answer SDP 描述，并调用 setRemoteDescription() 设置为远端描述。</li><li>UserA 和 UserB 分别生成 ICE（Interactive Connectivity Establishment）候选，即可用的网络地址。</li><li>UserA 和 UserB 通过信令服务器互相交换 ICE 候选，并设置为本地和远端 ICE 候选。</li><li>UserA 和 UserB 通过 ICE 候选建立 P2P 连接。</li><li>成功建立P2P 连接，可以进行通信了</li></ol><h3 id="_3-nat-穿透和-stun-turn-服务器" tabindex="-1"><a class="header-anchor" href="#_3-nat-穿透和-stun-turn-服务器" aria-hidden="true">#</a> 3. NAT 穿透和 STUN/TURN 服务器</h3><p>在实际网络环境中，大多数用户都位于 NAT（网络地址转换）环境之下。NAT 会导致用户之间无法直接建立 P2P 连接。为了解决这个问题，WebRTC 使用了 ICE 协议，结合 STUN（Session Traversal Utilities for NAT）和 TURN（Traversal Using Relays around NAT）服务器进行 NAT 穿透。</p><ul><li>STUN：STUN 服务器帮助用户获取公网 IP 地址和端口，供其他用户建立连接。</li><li>TURN：当 STUN 服务器无法实现 NAT 穿透时，TURN 服务器作为中继，将用户的数据中转至另一个用户。虽然这会增加通信延迟，但能确保通信成功。</li></ul><h2 id="二、webrtc应用场景" tabindex="-1"><a class="header-anchor" href="#二、webrtc应用场景" aria-hidden="true">#</a> 二、WebRTC应用场景</h2><p>WebRTC 技术在很多应用场景中都有广泛的应用，主要包括以下几个方面：</p><h3 id="实时音视频通信" tabindex="-1"><a class="header-anchor" href="#实时音视频通信" aria-hidden="true">#</a> 实时音视频通信：</h3><ul><li>点对点视频聊天：如 Google Meet、Zoom 等实时视频通话应用。</li><li>多人视频会议：企业级多人视频会议系统，如飞书、钉钉、腾讯会议、 Cisco Webex、Microsoft Teams 等。</li><li>在线教育：远程教育、在线培训和在线课堂等，如腾讯课堂、网易云课堂等。</li><li>电子健康：远程医疗咨询、在线心理咨询等。</li><li>客户支持：在线客服系统，提供实时音视频客户支持。</li></ul><h3 id="实时数据传输和文件共享" tabindex="-1"><a class="header-anchor" href="#实时数据传输和文件共享" aria-hidden="true">#</a> 实时数据传输和文件共享：</h3><ul><li>P2P 文件共享：直接在浏览器之间传输文件，如 ShareDrop、WebDrop 等。</li><li>在线协作工具：实时文档编辑、在线白板等，如 飞书文档、Google Docs、Microsoft Office 365 等。</li><li>多人游戏：基于浏览器的实时多人游戏，如 pixelstreaming。</li><li>实时数据同步：实时数据同步，如物联网设备状态同步。</li></ul><h3 id="实时媒体流处理" tabindex="-1"><a class="header-anchor" href="#实时媒体流处理" aria-hidden="true">#</a> 实时媒体流处理：</h3><ul><li>实时视频监控：使用 WebRTC 进行低延迟的实时视频监控。</li><li>实时直播：音频和视频直播，如 Facebook Live、Twitch 等。</li><li>实时录屏和远程桌面：支持远程桌面访问、协助和实时录屏等功能。</li><li>实时音视频处理：实时滤镜、美颜、背景替换等。</li></ul><h3 id="物联网-iot-和边缘计算" tabindex="-1"><a class="header-anchor" href="#物联网-iot-和边缘计算" aria-hidden="true">#</a> 物联网（IoT）和边缘计算：</h3><ul><li>实时设备控制：在浏览器中直接控制物联网设备。</li><li>边缘计算：将音视频处理和数据处理任务分布到边缘设备上，减轻服务器负担。</li><li>远程团队协作：使用 WebRTC 实现远程工程师对设备的实时控制和诊断。</li></ul><h3 id="社交网络" tabindex="-1"><a class="header-anchor" href="#社交网络" aria-hidden="true">#</a> 社交网络：</h3><ul><li>社交应用：如 QQ、微信、Facebook、WhatsApp 等应用中的实时音视频聊天功能。</li><li>直播平台：如 TikTok、抖音、快手 等短视频平台的实时互动直播功能。</li></ul><p>由于 WebRTC 可以在不依赖插件或外部应用的情况下实现实时通信，因此在各种需要实时音视频通信和数据传输的场景中都可以发挥重要作用。</p><p>后续我将陆续基于 <strong>WebRTC</strong> 实现如下应用，P2P音视频通话-&gt;视频会议-&gt;实时多人在线玩游戏(云游戏)-&gt;低延迟远程控制等。请敬请期待吧。</p><h2 id="三、总结" tabindex="-1"><a class="header-anchor" href="#三、总结" aria-hidden="true">#</a> 三、总结</h2><p>WebRTC 是一项强大的实时通信技术，通过 P2P 连接为用户提供高效、低延迟的音视频和数据通信。在解决 NAT 穿透问题上，WebRTC 结合了 STUN 和 TURN 服务器。在广泛的应用场景中，WebRTC 表现出了其巨大的潜力。随着技术的不断发展，相信未来 WebRTC 在各个领域的应用将会更加丰富和广泛。</p>',32)],a={},n=(0,l(3744).Z)(a,[["render",function(e,i){return(0,r.wg)(),(0,r.iD)("div",null,t)}]])}}]);