"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[989],{850:(e,a,n)=>{n.r(a),n.d(a,{data:()=>s});const s=JSON.parse('{"key":"v-46c05055","path":"/pages/webrtc/%E6%9E%84%E5%BB%BA%20WebRTC%20for%20IOS%20AppRTCMobile%20%E9%A1%B9%E7%9B%AE.html","title":"","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"环境搭建","slug":"环境搭建","link":"#环境搭建","children":[{"level":3,"title":"部署 AppRTC 信令服务器","slug":"部署-apprtc-信令服务器","link":"#部署-apprtc-信令服务器","children":[]},{"level":3,"title":"WebRTC for IOS 编译","slug":"webrtc-for-ios-编译","link":"#webrtc-for-ios-编译","children":[]},{"level":3,"title":"运行 AppRTCMobile","slug":"运行-apprtcmobile","link":"#运行-apprtcmobile","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1690084749000,"contributors":[{"name":"make","email":"yang1001yk@gmail.com","commits":2},{"name":"make","email":"make@pplabs.org","commits":1}]},"filePathRelative":"pages/webrtc/构建 WebRTC for IOS AppRTCMobile 项目.md"}')},85:(e,a,n)=>{n.r(a),n.d(a,{default:()=>o});var s=n(6252);const i=(0,s.uE)('<h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><p>在之前的几篇文章中，我们已经学习了如何在 <code>Web</code>、<code>Windows</code> 和 <code>Android</code> 平台上封装和建立一个 P2P 和 P2PS 音视频通话项目。然而，我们还没有讨论在 <code>Linux</code> 和 <code>iOS</code> 平台上如何操作。因此，这篇文章将首先介绍如何在 <code>iOS</code> 平台上构建 <code>WebRTC AppRTCMobile</code> 项目。在后续的文章中，我们将继续探讨 <code>Linux</code> 平台的实现。</p><p>这是 <code>Android</code> 与 <code>IOS</code> 基于 <code>webrtc：m98</code> 构建的通话效果:</p><p><img src="http://devyk.top/2022/202307222212963.jpg" alt="img_v2_dede26f4-da7b-484c-a61b-b2d5a18f593g"></p><p>如何还想了解 <code>Web</code> 、<code>Windows</code> 、<code>Android</code> WebRTC 开发，可以移步如下文章</p>',5),p={href:"https://yangkun19921001.github.io/AudioVideoBlog/pages/webrtc/",target:"_blank",rel:"noopener noreferrer"},t=(0,s.uE)('<h2 id="环境搭建" tabindex="-1"><a class="header-anchor" href="#环境搭建" aria-hidden="true">#</a> 环境搭建</h2><p>由于我们主要搭建官方的 <code>AppRTCMobile</code> 项目，所以就用不到之前开发的信令服务器，那么就只能用官方提供的 <code>AppRTC</code> 做为信令服务器了。</p><h3 id="部署-apprtc-信令服务器" tabindex="-1"><a class="header-anchor" href="#部署-apprtc-信令服务器" aria-hidden="true">#</a> 部署 AppRTC 信令服务器</h3><p>我们可以使用 <code>docker</code> 来进行搭建</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#https://hub.docker.com/r/piasy/apprtc-server/</span>\n\n<span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">--net</span><span class="token operator">=</span>host <span class="token punctuation">\\</span>\n  <span class="token parameter variable">-e</span> <span class="token assign-left variable">PUBLIC_IP</span><span class="token operator">=</span><span class="token operator">&lt;</span>server public IP<span class="token operator">&gt;</span> <span class="token punctuation">\\</span>\n  <span class="token parameter variable">-it</span> piasy/apprtc-server\n  \n示例:\n<span class="token function">docker</span> run <span class="token parameter variable">--rm</span> <span class="token parameter variable">--net</span><span class="token operator">=</span>host   <span class="token parameter variable">-e</span> <span class="token assign-left variable">PUBLIC_IP</span><span class="token operator">=</span><span class="token number">192.144</span>.201.2   <span class="token parameter variable">-it</span> piasy/apprtc-server\n\n检查是否运行起来\n<span class="token function">lsof</span> <span class="token parameter variable">-i</span> <span class="token number">8080</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="webrtc-for-ios-编译" tabindex="-1"><a class="header-anchor" href="#webrtc-for-ios-编译" aria-hidden="true">#</a> WebRTC for IOS 编译</h3><ol><li><p>clone webrtc</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">git</span> clone git@github.com:yangkun19921001/OpenRTCClient.git\n<span class="token function">git</span> checkout develop\n\n<span class="token comment">#配置 OpenRTCClient/build_system 环境变量</span>\n<span class="token builtin class-name">cd</span> OpenRTCClient/webrtc\n\nwebrtc_build gen ios arm64 debug <span class="token punctuation">..</span>/build_system/build_options_set/default out \n\nwebrtc_build build ios arm64 debug <span class="token punctuation">..</span>/build_system/build_options_set/default out\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>在编译的过程中，如果出现如下错误:</p><p>1.1 <code>../../../../../webrtc/third_party/ffmpeg/libavutil/macros.h:28:10: fatal error: &#39;libavutil/avconfig.h</code></p><p>找到 <code>out/ios/arm64/debug/args.gn</code> ,将 <code>rtc_use_h264 = false</code> 改为 <code>false</code></p><p>1.2 安装失败</p><p><img src="http://devyk.top/2022/202307222257900.png" alt="image-20230722225700632"></p><p><code>ios</code> 安装没有 <code>android</code> 那么方便，它对安装的应用安全性较高，所以我们要进行编译打开签名的配置</p><p><code>ios_enable_code_signing = true</code></p><p>1.3 <code>Bundle Identifier &amp; info.list</code> 修改保持一致</p>',15),d=(0,s.uE)('<p>1.4 <code>Xcode 14 - Cannot code sign because the target does not have an Info.plist file</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Select Build Settings --&gt; Packaging --&gt; Generate info.plist File = info.plist 绝对路径\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="运行-apprtcmobile" tabindex="-1"><a class="header-anchor" href="#运行-apprtcmobile" aria-hidden="true">#</a> 运行 AppRTCMobile</h3><p>编译完成后，找到下图的文件然后双击打开</p><p><img src="http://devyk.top/2022/202307222246188.png" alt="image-20230722224648827"></p><p>打开后是这样的</p><p><img src="http://devyk.top/2022/202307222251477.png" alt="image-20230722225118462"></p><p>进行签名配置:</p><p><img src="http://devyk.top/2022/202307222253861.png" alt="image-20230722225333621"></p><p>配置 info.plist 路径</p><p><img src="http://devyk.top/2022/202307222255677.png" alt="image-20230722225514346"></p><p>还有一个问题，由于我当前 <code>IOS</code> 版本是 <code>16.5.1</code> ,然后 <code>XCode</code> 报不支持该设备</p><p><img src="http://devyk.top/2022/202307222257325.png" alt="image-20230722225754973"></p><p>解决办法是升级 <code>OS</code> 和 <code>XCode</code> 版本，升级后的版本为:</p><p><img src="http://devyk.top/2022/202307222259112.png" alt="image-20230722225918748"></p><p><img src="http://devyk.top/2022/202307222259720.png" alt="image-20230722225945378"></p><p>然后，最后一步还需要再 <code>IPhone -&gt; 设置 -&gt; 通用 -&gt; VPN 与设备管理中找到我们刚刚运行的 app, 然后点击信任</code>。</p><p><img src="http://devyk.top/2022/202307222304121.png" alt="image-20230722230411589"></p><p>到这里，就能编译成功并运行起来了。</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><p>今天算是搞了一天，最后终于是运行起来并达到了预期。</p><p>后续我们将继续分享 <code>webrtc</code> 相关的知识，下期再会！</p>',22),l={},o=(0,n(3744).Z)(l,[["render",function(e,a){const n=(0,s.up)("ExternalLinkIcon"),l=(0,s.up)("key"),o=(0,s.up)("string");return(0,s.wg)(),(0,s.iD)("div",null,[i,(0,s._)("p",null,[(0,s._)("a",p,[(0,s.Uk)("WebRTC 系列文章"),(0,s.Wm)(n)])]),t,(0,s.Wm)(l,null,{default:(0,s.w5)((()=>[(0,s.Uk)("CFBundleIdentifier")])),_:1}),(0,s.Wm)(o,null,{default:(0,s.w5)((()=>[(0,s.Uk)("xxx.xxx")])),_:1}),d])}]])}}]);