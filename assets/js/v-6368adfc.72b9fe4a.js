"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[764],{1539:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t=JSON.parse('{"key":"v-6368adfc","path":"/pages/project/2.P2P%E6%9E%B6%E6%9E%84%E7%9A%84%E5%A4%9A%E4%BA%BA%E9%9F%B3%E8%A7%86%E9%A2%91%E9%80%9A%E8%AF%9D.html","title":"2.P2P架构的多人音视频通话解决方案","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"背景","slug":"背景","link":"#背景","children":[]},{"level":3,"title":"P2P 架构的优势","slug":"p2p-架构的优势","link":"#p2p-架构的优势","children":[]}]},{"level":2,"title":"WebRTC基本概念","slug":"webrtc基本概念","link":"#webrtc基本概念","children":[{"level":3,"title":"基本组件","slug":"基本组件","link":"#基本组件","children":[]},{"level":3,"title":"信令","slug":"信令","link":"#信令","children":[]},{"level":3,"title":"SDP（会话描述协议）","slug":"sdp-会话描述协议","link":"#sdp-会话描述协议","children":[]},{"level":3,"title":"NAT穿越和ICE","slug":"nat穿越和ice","link":"#nat穿越和ice","children":[]}]},{"level":2,"title":"信令服务器","slug":"信令服务器","link":"#信令服务器","children":[{"level":3,"title":"信令服务器的作用","slug":"信令服务器的作用","link":"#信令服务器的作用","children":[]},{"level":3,"title":"选择合适的信令服务器","slug":"选择合适的信令服务器","link":"#选择合适的信令服务器","children":[]}]},{"level":2,"title":"实现多人音视频通话","slug":"实现多人音视频通话","link":"#实现多人音视频通话","children":[{"level":3,"title":"设计考虑","slug":"设计考虑","link":"#设计考虑","children":[]},{"level":3,"title":"服务端实现: nodejs+socket.io","slug":"服务端实现-nodejs-socket-io","link":"#服务端实现-nodejs-socket-io","children":[]},{"level":3,"title":"客户端实现：Web","slug":"客户端实现-web","link":"#客户端实现-web","children":[]},{"level":3,"title":"客户端实现：Android","slug":"客户端实现-android","link":"#客户端实现-android","children":[]}]},{"level":2,"title":"优化和扩展","slug":"优化和扩展","link":"#优化和扩展","children":[{"level":3,"title":"优化音视频质量","slug":"优化音视频质量","link":"#优化音视频质量","children":[]},{"level":3,"title":"网络适应性","slug":"网络适应性","link":"#网络适应性","children":[]},{"level":3,"title":"安全性和隐私保护","slug":"安全性和隐私保护","link":"#安全性和隐私保护","children":[]},{"level":3,"title":"集成其他 WebRTC 功能","slug":"集成其他-webrtc-功能","link":"#集成其他-webrtc-功能","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"updatedTime":1689519943000,"contributors":[{"name":"make","email":"yang1001yk@gmail.com","commits":1}]},"filePathRelative":"pages/project/2.P2P架构的多人音视频通话.md"}')},3159:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var t=a(6252);const p=(0,t.uE)('<h1 id="_2-p2p架构的多人音视频通话解决方案" tabindex="-1"><a class="header-anchor" href="#_2-p2p架构的多人音视频通话解决方案" aria-hidden="true">#</a> 2.P2P架构的多人音视频通话解决方案</h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介" aria-hidden="true">#</a> 简介</h2><h3 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h3><p>随着互联网技术的飞速发展，实时音视频通话已经成为在线教育、远程办公、社交媒体、云游戏等领域的核心功能。WebRTC（Web Real-Time Communication）作为一项开放的实时通信标准，为开发者提供了快速构建实时音视频通话系统的能力。在本文中，我们将深入探讨如何使用 WebRTC 构建一个基于 P2P 架构的多人音视频通话解决方案。</p><h3 id="p2p-架构的优势" tabindex="-1"><a class="header-anchor" href="#p2p-架构的优势" aria-hidden="true">#</a> P2P 架构的优势</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7685eedcbc694aa5a5313305e3c2816a~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>P2P（Peer-to-Peer）架构的优势在于它可以直接在参与者之间建立连接，而无需经过中心服务器。这可以减少通信延迟，提高音视频质量，降低服务器带宽和计算资源消耗。同时，P2P 架构在很大程度上提高了系统的可扩展性和容错能力。</p><p>本文将从理论和实践两个层面深入探讨 WebRTC 的 P2P 多人音视频通话解决方案. 核心的多人音视频通话代码我已经封装起来了，现在你可以很方便的实现 P2P 多人音视频聊天了。代码地址: https://github.com/yangkun19921001/OpenRTCProject ,运行后 web 与 android 端就可以进行通话了，效果如下:</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/fd3df21ddc534d349410fc6e82c69d91~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="webrtc基本概念" tabindex="-1"><a class="header-anchor" href="#webrtc基本概念" aria-hidden="true">#</a> WebRTC基本概念</h2><p>在深入了解 WebRTC 的 P2P 多人音视频通话解决方案之前，我们首先需要了解一些 WebRTC 的基本概念。</p><h3 id="基本组件" tabindex="-1"><a class="header-anchor" href="#基本组件" aria-hidden="true">#</a> 基本组件</h3><p>这个小点的内容可以移步这里: https://juejin.cn/post/7213307533279576124</p><h3 id="信令" tabindex="-1"><a class="header-anchor" href="#信令" aria-hidden="true">#</a> 信令</h3><p>信令是指在通话过程中协调通信双方的过程。在 WebRTC 中，信令主要负责以下几个方面：</p><ol><li>协商通信参数：通信双方需要协商一些通信参数，例如音视频编码格式、分辨率等。这些参数被封装在 SDP（会话描述协议）中，并通过信令服务器进行交换。</li><li>发现和交换网络地址：由于 NAT（网络地址转换）的存在，通信双方需要发现并交换其公共网络地址。这一过程通过 ICE（Interactive Connectivity Establishment）协议来实现。</li></ol><h3 id="sdp-会话描述协议" tabindex="-1"><a class="header-anchor" href="#sdp-会话描述协议" aria-hidden="true">#</a> SDP（会话描述协议）</h3><p>SDP 是一种文本格式的协议，用于描述多媒体会话的属性，例如音视频编码格式、分辨率、帧率等。在 WebRTC 中，SDP 主要用于在通信双方之间协商通信参数。</p><h3 id="nat穿越和ice" tabindex="-1"><a class="header-anchor" href="#nat穿越和ice" aria-hidden="true">#</a> NAT穿越和ICE</h3><p>由于 NAT 的存在，通信双方的私有网络地址通常无法直接访问。为了解决这个问题，WebRTC 引入了 ICE（Interactive Connectivity Establishment）协议。ICE 协议通过一系列的技术（如 STUN、TURN 服务器）帮助通信双方发现和协商可用的公共网络地址，从而实现 NAT 穿越。</p><p>ICE 的工作原理如下：</p><ol><li>首先，通信双方收集本地网络地址（包括私有地址和公共地址）以及通过 STUN 和 TURN 服务器获取的候选地址。</li><li>接下来，双方通过信令服务器交换这些候选地址。</li><li>通信双方使用这些候选地址进行连接测试，确定最佳的可用地址。</li><li>一旦找到可用的地址，通信双方就可以开始实时音视频通话。</li></ol><h2 id="信令服务器" tabindex="-1"><a class="header-anchor" href="#信令服务器" aria-hidden="true">#</a> 信令服务器</h2><h3 id="信令服务器的作用" tabindex="-1"><a class="header-anchor" href="#信令服务器的作用" aria-hidden="true">#</a> 信令服务器的作用</h3><p>信令服务器负责协调客户端之间的通信，主要包括交换 SDP 信息和 ICE 候选（NAT 穿越信息）。信令服务器可以使用 WebSocket、Socket.IO 等技术来实现。（咱们选择的是 Socket.io）。</p><h3 id="选择合适的信令服务器" tabindex="-1"><a class="header-anchor" href="#选择合适的信令服务器" aria-hidden="true">#</a> 选择合适的信令服务器</h3><p>在选择信令服务器时，开发者需要考虑以下几个方面：</p><ol><li>可靠性：信令服务器需要具有高可靠性，以确保通话过程中的信令消息能够准确无误地传输。</li><li>延迟：信令服务器的延迟应尽可能低，以减少通话建立过程中的等待时间。</li><li>扩展性：随着用户数量的增长，信令服务器需要具有良好的扩展性，以满足更高的并发需求。</li><li>安全性：信令服务器应提供安全机制，例如 SSL/TLS 加密，以防止信令消息被窃听或篡改。</li></ol><h2 id="实现多人音视频通话" tabindex="-1"><a class="header-anchor" href="#实现多人音视频通话" aria-hidden="true">#</a> 实现多人音视频通话</h2><p>在了解了 WebRTC 的基本概念和信令服务器之后，我们现在可以开始实现多人音视频通话功能。</p><h3 id="设计考虑" tabindex="-1"><a class="header-anchor" href="#设计考虑" aria-hidden="true">#</a> 设计考虑</h3><p>在设计多人音视频通话解决方案时，需要考虑以下几个方面：</p><ol><li>通话连接方式：考虑到 P2P 架构的优势，本文将采用全网状连接方式，即每个客户端都直接与其他客户端建立连接。</li><li>房间管理：为了实现多人音视频通话，需要引入房间的概念。每个房间可以容纳多个客户端，客户端之间可以互相通话。</li><li>动态连接和断开：在多人通话过程中，新的客户端可能加入房间，而原有客户端可能离开房间。解决方案需要能够灵活地处理这些情况。</li></ol><h3 id="服务端实现-nodejs-socket-io" tabindex="-1"><a class="header-anchor" href="#服务端实现-nodejs-socket-io" aria-hidden="true">#</a> 服务端实现: nodejs+socket.io</h3>',34),e={href:"https://juejin.cn/post/7214427834994917435",target:"_blank",rel:"noopener noreferrer"},o=(0,t.uE)('<h4 id="_1-加入房间" tabindex="-1"><a class="header-anchor" href="#_1-加入房间" aria-hidden="true">#</a> 1. 加入房间</h4><p>加入房间的回调跟之前有点不一样，当有新用户加入进来时，信令服务器需要将房间内除自己的 remoteId 告知当前用户，并且再把当前加入进来的用户告知其它用户。因为各自需要根据 remoteId 去创建 PeerConnection.</p><p>核心代码如下:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;join&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">room</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    socket<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>room<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Socket ID </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>socket<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> joined room </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>room<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n    <span class="token keyword">const</span> clientsInRoom <span class="token operator">=</span> io<span class="token punctuation">.</span>sockets<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span>rooms<span class="token punctuation">[</span>room<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> clientsCount <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>clientsInRoom<span class="token punctuation">.</span>sockets<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n  \n    <span class="token comment">// 获取房间中的所有客户端 ID，除了当前加入的客户端</span>\n    <span class="token keyword">const</span> otherClientIds <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>clientsInRoom<span class="token punctuation">.</span>sockets<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">id</span> <span class="token operator">=&gt;</span> id <span class="token operator">!==</span> socket<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n    <span class="token comment">// 发送包含所有其他客户端 ID 的 join 消息给新加入的客户端</span>\n    socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;joined&#39;</span><span class="token punctuation">,</span>  room<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>id<span class="token punctuation">,</span> otherClientIds <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  \n    <span class="token comment">// 如果房间中有多个客户端，将 join 消息发送给房间中的其他客户端</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>clientsCount <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      socket<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>room<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;joined&#39;</span><span class="token punctuation">,</span>  room<span class="token punctuation">,</span>  socket<span class="token punctuation">.</span>id <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-离开房间" tabindex="-1"><a class="header-anchor" href="#_2-离开房间" aria-hidden="true">#</a> 2. 离开房间</h4><p>当有用户离开时，我们需要将消息转发给同房间内的其它客户端。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;leave&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">room</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">User </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>socket<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> left room </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>room<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// 发送 leave 消息给自己和房间中的其他客户端</span>\n    io<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>room<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;leaved&#39;</span><span class="token punctuation">,</span>  room<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>id <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    socket<span class="token punctuation">.</span><span class="token function">leave</span><span class="token punctuation">(</span>room<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Socket ID </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>socket<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> left room </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>room<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-媒体信息和-ice-交换" tabindex="-1"><a class="header-anchor" href="#_3-媒体信息和-ice-交换" aria-hidden="true">#</a> 3. 媒体信息和 ICE 交换</h4><p>sdp 消息和 ice 我们通过 “message” 信令进行交换</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 发送消息到指定的房间和 socket.id</span>\n  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span> <span class="token parameter">room<span class="token punctuation">,</span> id<span class="token punctuation">,</span> msg</span> <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> sender <span class="token operator">=</span> socket<span class="token punctuation">.</span>id<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> clientsInRoom <span class="token operator">=</span> io<span class="token punctuation">.</span>sockets<span class="token punctuation">.</span>adapter<span class="token punctuation">.</span>rooms<span class="token punctuation">[</span>room<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>clientsInRoom <span class="token operator">&amp;&amp;</span> clientsInRoom<span class="token punctuation">.</span>sockets<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      socket<span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> sender<span class="token punctuation">,</span> id<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Socket ID </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> is not in room </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>room<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对流程不太明白的可以看下这张图，其它的交互与上一篇的信令流程一样。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9799b7aa42394a2e85bd948c2542fdb1~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h3 id="客户端实现-web" tabindex="-1"><a class="header-anchor" href="#客户端实现-web" aria-hidden="true">#</a> 客户端实现：Web</h3><p>在本节中，我们将介绍如何基于WebRTC 实现 Web 端的多人音视频通话客户端。具体内容包括：</p><h4 id="网页布局" tabindex="-1"><a class="header-anchor" href="#网页布局" aria-hidden="true">#</a> 网页布局</h4><p>首先，创建一个简单的网页布局，包括以下几个部分：</p><ol><li>本地音视频预览窗口</li><li>远程音视频窗口列表</li><li>加入房间按钮</li><li>离开房间按钮</li><li>输入信令服务器地址框</li></ol><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 本地音视频预览窗口 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>localVideo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">autoplay</span> <span class="token attr-name">muted</span> <span class="token attr-name">playsinline</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 远程音视频窗口列表 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>remoteVideos<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 加入房间按钮 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>joinBtn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Join Room<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 离开房间按钮 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>leaveBtn<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>Leave Room<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token comment">&lt;!-- 信令服务器地址 --&gt;</span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>serverUrl<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://xxx.xxx<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="获取本地音视频流" tabindex="-1"><a class="header-anchor" href="#获取本地音视频流" aria-hidden="true">#</a> 获取本地音视频流</h4><p>使用 <code>getUserMedia</code> API 获取本地音视频流，并将其显示在本地预览窗口上：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>navigator\n  <span class="token punctuation">.</span>mediaDevices\n  <span class="token punctuation">.</span><span class="token function">getUserMedia</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">audio</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token literal-property property">video</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">stream</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> \n  <span class="token keyword">const</span> localVideo <span class="token operator">=</span> document\n  <span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;localVideo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n  localVideo<span class="token punctuation">.</span>srcObject <span class="token operator">=</span> stream<span class="token punctuation">;</span>   \n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">error</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> \n  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&#39;Error accessing media devices.&#39;</span><span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="与信令服务器交互" tabindex="-1"><a class="header-anchor" href="#与信令服务器交互" aria-hidden="true">#</a> 与信令服务器交互</h4><p>与信令服务器交互的基本步骤如下：</p><ol><li><p>建立与信令服务器的 SocketIO 连接。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 连接信令服务器</span>\n  socket <span class="token operator">=</span> io<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>serverUrl<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>监听信令服务器发来的消息，并根据消息类型进行处理。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token comment">// 处理消息事件</span>\n  socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> message <span class="token operator">=</span> msg<span class="token punctuation">;</span>\n    <span class="token keyword">const</span> peer <span class="token operator">=</span> peers<span class="token punctuation">[</span>sender<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;offer&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// 添加对方 SDP</span>\n        <span class="token comment">// createAnswer -&gt; 设置本地 SDP </span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;answer&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        <span class="token comment">// 添加对方 SDP</span>\n    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token string">&#39;candidate&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token comment">//添加 candidate </span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>发送消息给信令服务器，例如加入房间 join、发送 Offer、发送 Answer 等。</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 加入房间</span>\nsocket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;join&#39;</span><span class="token punctuation">,</span> roomInput<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//发送 answer sdp</span>\nsocket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> roomInput<span class="token punctuation">.</span>value<span class="token punctuation">,</span> sender<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;answer&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">sdp</span><span class="token operator">:</span>    peer<span class="token punctuation">.</span>localDescription<span class="token punctuation">.</span>sdp <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//发送 offer sdp 消息</span>\nsocket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> room<span class="token punctuation">,</span> remoteId<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span><span class="token string">&#39;offer&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">sdp</span><span class="token operator">:</span> peer<span class="token punctuation">.</span>localDescription<span class="token punctuation">.</span>sdp <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">//发送 ice candidate 消息</span>\nsocket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">&#39;message&#39;</span><span class="token punctuation">,</span> room<span class="token punctuation">,</span> remoteId<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n          <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;candidate&#39;</span><span class="token punctuation">,</span>\n          <span class="token literal-property property">label</span><span class="token operator">:</span>event<span class="token punctuation">.</span>candidate<span class="token punctuation">.</span>sdpMLineIndex<span class="token punctuation">,</span> \n          <span class="token literal-property property">id</span><span class="token operator">:</span>event<span class="token punctuation">.</span>candidate<span class="token punctuation">.</span>sdpMid<span class="token punctuation">,</span> \n          <span class="token literal-property property">candidate</span><span class="token operator">:</span> event<span class="token punctuation">.</span>candidate<span class="token punctuation">.</span>candidate\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建和管理-rtcpeerconnection" tabindex="-1"><a class="header-anchor" href="#创建和管理-rtcpeerconnection" aria-hidden="true">#</a> 创建和管理 RTCPeerConnection</h4><p>为了实现多人音视频通话，需要为每个远程客户端创建一个 <code>RTCPeerConnection</code> 实例，并执行信令流程。同时，需要管理这些实例，以便在客户端加入或离开房间时进行相应的操作。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//管理多个 peer 对象</span>\n<span class="token keyword">let</span> peers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> configuration <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">iceServers</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span> <span class="token literal-property property">urls</span><span class="token operator">:</span> <span class="token string">&#39;stun:stun.l.google.com:19302&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> peer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="展示远程音视频流" tabindex="-1"><a class="header-anchor" href="#展示远程音视频流" aria-hidden="true">#</a> 展示远程音视频流</h4><p>将收到的远程音视频流显示在页面上，可以使用以下方法：</p><ol><li>为每个远程客户端创建一个 <code>&lt;video&gt;</code> 元素。</li><li>将远程音视频流设置为 <code>&lt;video&gt;</code> 元素的 <code>srcObject</code> 属性。</li><li>将 <code>&lt;video&gt;</code> 元素添加到远程音视频窗口列表中。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">addRemoteVideo</span><span class="token punctuation">(</span><span class="token parameter">peerId<span class="token punctuation">,</span> stream</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> remoteVideos <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;remoteVideos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;video&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  video<span class="token punctuation">.</span>id <span class="token operator">=</span> peerId<span class="token punctuation">;</span>\n  video<span class="token punctuation">.</span>srcObject <span class="token operator">=</span> stream<span class="token punctuation">;</span>\n  video<span class="token punctuation">.</span>autoplay <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  video<span class="token punctuation">.</span>playsinline <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  remoteVideos<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>video<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">removeRemoteVideo</span><span class="token punctuation">(</span><span class="token parameter">peerId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> remoteVideos <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;remoteVideos&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> video <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>peerId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>video<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    remoteVideos<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>video<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现房间管理" tabindex="-1"><a class="header-anchor" href="#实现房间管理" aria-hidden="true">#</a> 实现房间管理</h4><p>为了实现房间管理，需要处理以下几个操作：</p><ol><li>加入房间：当用户点击“加入房间”按钮时，发送加入房间的消息给信令服务器。</li><li>离开房间：当用户点击“离开房间”按钮时，发送离开房间的消息给信令服务器，并关闭所有 <code>RTCPeerConnection</code> 实例。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> joinBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;joinBtn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> leaveBtn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;leaveBtn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\njoinBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 发送加入房间的消息给信令服务器</span>\n  <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;join&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">roomId</span><span class="token operator">:</span> <span class="token string">&#39;your-room-id&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nleaveBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 发送离开房间的消息给信令服务器</span>\n  <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;leave&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">roomId</span><span class="token operator">:</span> <span class="token string">&#39;your-room-id&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 关闭并删除所有 RTCPeerConnection 实例</span>\n  peerConnections<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">peerConnection<span class="token punctuation">,</span> peerId</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token function">removePeerConnection</span><span class="token punctuation">(</span>peerId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="客户端实现-android" tabindex="-1"><a class="header-anchor" href="#客户端实现-android" aria-hidden="true">#</a> 客户端实现：Android</h3><p>在本节中，我们将介绍如何实现一个基于 WebRTC Android 的多人音视频通话客户端。具体内容包括：</p><ol><li>Android WebRTC 源码 / SDK 依赖集成</li><li>获取本地音视频流</li><li>与信令服务器交互</li><li>创建和管理 <code>RTCPeerConnection</code></li><li>展示远程音视频流</li><li>实现房间管理</li></ol><h4 id="android-webrtc-集成" tabindex="-1"><a class="header-anchor" href="#android-webrtc-集成" aria-hidden="true">#</a> Android WebRTC 集成</h4>',40),c={href:"https://webrtc.github.io/webrtc-org/native-code/android/",target:"_blank",rel:"noopener noreferrer"},i={href:"https://github.com/yangkun19921001/OpenRTCClient/blob/develop/examples/android_gradle/p2ps",target:"_blank",rel:"noopener noreferrer"},l=(0,t.uE)('<h4 id="获取本地音视频流-1" tabindex="-1"><a class="header-anchor" href="#获取本地音视频流-1" aria-hidden="true">#</a> 获取本地音视频流</h4><p>在 Android 应用中，使用 <code>MediaStream</code> API 获取本地音视频流。以下是一个简单的示例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 创建音视频流</span>\n<span class="token class-name">MediaStream</span> localStream <span class="token operator">=</span> peerConnectionFactory<span class="token punctuation">.</span><span class="token function">createLocalMediaStream</span><span class="token punctuation">(</span><span class="token string">&quot;localStream&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 获取音频设备并创建音频轨道</span>\n<span class="token class-name">AudioSource</span> audioSource <span class="token operator">=</span> peerConnectionFactory<span class="token punctuation">.</span><span class="token function">createAudioSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MediaConstraints</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">AudioTrack</span> audioTrack <span class="token operator">=</span> peerConnectionFactory<span class="token punctuation">.</span><span class="token function">createAudioTrack</span><span class="token punctuation">(</span><span class="token string">&quot;audioTrack&quot;</span><span class="token punctuation">,</span> audioSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\nlocalStream<span class="token punctuation">.</span><span class="token function">addTrack</span><span class="token punctuation">(</span>audioTrack<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 获取视频设备并创建视频轨道</span>\n<span class="token class-name">VideoCapturer</span> videoCapturer <span class="token operator">=</span> <span class="token function">createVideoCapturer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建 VideoCapturer 实例的方法</span>\n<span class="token class-name">VideoSource</span> videoSource <span class="token operator">=</span> peerConnectionFactory<span class="token punctuation">.</span><span class="token function">createVideoSource</span><span class="token punctuation">(</span>videoCapturer<span class="token punctuation">.</span><span class="token function">isScreencast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">VideoTrack</span> videoTrack <span class="token operator">=</span> peerConnectionFactory<span class="token punctuation">.</span><span class="token function">createVideoTrack</span><span class="token punctuation">(</span><span class="token string">&quot;videoTrack&quot;</span><span class="token punctuation">,</span> videoSource<span class="token punctuation">)</span><span class="token punctuation">;</span>\nlocalStream<span class="token punctuation">.</span><span class="token function">addTrack</span><span class="token punctuation">(</span>videoTrack<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// 将本地音视频流显示在 SurfaceViewRenderer 上</span>\nlocalVideoTrack<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>localVideoRenderer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="与信令服务器交互-1" tabindex="-1"><a class="header-anchor" href="#与信令服务器交互-1" aria-hidden="true">#</a> 与信令服务器交互</h4><p>与信令服务器交互的基本步骤类似于 Web 客户端。在 Android 应用中，我们还是使用 Socket.io 与信令服务器建立连接，并处理相关消息。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">ISignalEventListener</span> listener<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n            <span class="token keyword">this</span><span class="token punctuation">.</span>events <span class="token operator">=</span> listener<span class="token punctuation">;</span>\n            <span class="token class-name">IO<span class="token punctuation">.</span>Options</span> options <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IO<span class="token punctuation">.</span>Options</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token class-name">SocketSSL</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            socket <span class="token operator">=</span> <span class="token constant">IO</span><span class="token punctuation">.</span><span class="token function">socket</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> options<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">setSocketListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">URISyntaxException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        socket<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="创建和管理-rtcpeerconnection-1" tabindex="-1"><a class="header-anchor" href="#创建和管理-rtcpeerconnection-1" aria-hidden="true">#</a> 创建和管理 RTCPeerConnection</h4><p>在 Android 应用中创建和管理 <code>RTCPeerConnection</code> 的方法与 Web 客户端类似。需要为每个远程客户端创建一个 <code>RTCPeerConnection</code> 实例，并执行信令流程。同时，需要管理这些实例，以便在客户端加入或离开房间时进行相应的操作。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//为每个 remoteId 管理 RTCPeerConnection </span>\n<span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">&gt;</span></span> peerConnections <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">//处理远端用户加入的流程</span>\n<span class="token annotation punctuation">@Override</span>\n<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onJoined</span><span class="token punctuation">(</span><span class="token class-name">String</span> room<span class="token punctuation">,</span> <span class="token class-name">String</span> remoteId<span class="token punctuation">,</span> <span class="token class-name">JSONArray</span> otherClientIds<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>remoteId<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getSocketId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PSTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Joined room &quot;</span> <span class="token operator">+</span> room <span class="token operator">+</span> <span class="token string">&quot; with ID &quot;</span> <span class="token operator">+</span> remoteId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>otherClientIds <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> otherClientIds<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PSTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Joined room &quot;</span> <span class="token operator">+</span> room <span class="token operator">+</span> <span class="token string">&quot; with ID &quot;</span> <span class="token operator">+</span> remoteId <span class="token operator">+</span> <span class="token string">&quot; joom other size:&quot;</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token comment">// 遍历 otherClientIds 并为每个客户端创建一个新的 PeerConnection</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> otherClientIds<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">try</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">String</span> otherClientId <span class="token operator">=</span> otherClientIds<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    pm<span class="token punctuation">.</span><span class="token function">createPeerConnection</span><span class="token punctuation">(</span>otherClientId<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PSTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;createPeerConnection Remote joined room &quot;</span> <span class="token operator">+</span> room <span class="token operator">+</span> <span class="token string">&quot; with ID &quot;</span> <span class="token operator">+</span> otherClientId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JSONException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n            <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PSTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;Remote client joined room &quot;</span> <span class="token operator">+</span> room <span class="token operator">+</span> <span class="token string">&quot; with ID &quot;</span> <span class="token operator">+</span> remoteId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            pm<span class="token punctuation">.</span><span class="token function">createPeerConnection</span><span class="token punctuation">(</span>remoteId<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removePeerConnection</span><span class="token punctuation">(</span><span class="token class-name">String</span> room<span class="token punctuation">,</span> <span class="token class-name">String</span> remoteId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        executor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token comment">// 移除 PeerConnection</span>\n            <span class="token class-name">PeerConnection</span> peerConnection <span class="token operator">=</span> peerConnections<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>remoteId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>peerConnection <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                peerConnection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>peerEventListener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                peerEventListener<span class="token punctuation">.</span><span class="token function">onRemoveRemoteStream</span><span class="token punctuation">(</span>remoteId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里有一点需要特别注意一下，就是 <strong>createPeerConnection</strong> 的创建时机，当远端用户加入进来时我们需要根据加入进来的 remoteId 来判断是否是自己，如果是自己我们需要根据 otherClientIds 字段遍历房间中已经存在的 remoteId ，然后为其创建对应的 PeerConnection 对象。如果当前加入进来的 remoteId 与自己不相同，说明自己是已经在房间中了，这个时候也需要根据 remoteId 来创建 PeerConnection 并 createOffer 。 这样我们就比较容易管理多个 PeerConnection 对象了。</p><h4 id="展示远程音视频流-1" tabindex="-1"><a class="header-anchor" href="#展示远程音视频流-1" aria-hidden="true">#</a> 展示远程音视频流</h4><p>在 Android 应用中展示远程音视频流，可以使用 <code>SurfaceViewRenderer</code> 控件。将收到的远程音视频流添加到 <code>SurfaceViewRenderer</code> 控件上，以显示远程画面。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>            <span class="token annotation punctuation">@Override</span>\n            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAddStream</span><span class="token punctuation">(</span><span class="token class-name">MediaStream</span> mediaStream<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onAddStream</span><span class="token punctuation">(</span>mediaStream<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token class-name">Log</span><span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">P2PSTAG</span><span class="token punctuation">,</span> <span class="token string">&quot;onAddStream UserId:&quot;</span> <span class="token operator">+</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>mediaStream<span class="token punctuation">.</span>videoTracks<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token class-name">VideoTrack</span> remoteVideoTrack <span class="token operator">=</span> mediaStream<span class="token punctuation">.</span>videoTracks<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>peerEventListener <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        peerEventListener<span class="token punctuation">.</span><span class="token function">onAddRemoteStream</span><span class="token punctuation">(</span>remoteVideoTrack<span class="token punctuation">,</span> <span class="token function">getUserId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们收到 onAddStream 回调时，通知 UI 线程 创建 VideoSink ，让后将其添加到 remoteVideoTrack 轨道中，可以参考其代码:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addRemoteStream</span><span class="token punctuation">(</span><span class="token class-name">VideoTrack</span> track<span class="token punctuation">,</span> <span class="token class-name">String</span> remoteId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">SurfaceViewRenderer</span> videoRenderer <span class="token operator">=</span> <span class="token function">createVideoRenderer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token function">addSurfaceView</span><span class="token punctuation">(</span>videoRenderer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            track<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>videoRenderer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            videoRenderers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>remoteId<span class="token punctuation">,</span> videoRenderer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当收到 leaved 信令消息时，我们需要将远端的视频窗口删除掉，代码如下:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token annotation punctuation">@Override</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeRemoteStream</span><span class="token punctuation">(</span><span class="token class-name">String</span> remoteId<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n            <span class="token class-name">SurfaceViewRenderer</span> renderer <span class="token operator">=</span> videoRenderers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>remoteId<span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>renderer <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                mGridLayout<span class="token punctuation">.</span><span class="token function">removeView</span><span class="token punctuation">(</span>renderer<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                renderer<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                renderer <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="实现房间管理-1" tabindex="-1"><a class="header-anchor" href="#实现房间管理-1" aria-hidden="true">#</a> 实现房间管理</h4><p>为了实现房间管理，需要处理以下几个操作：</p><ol><li>加入房间：当用户点击“加入房间”按钮时，发送加入房间的消息给信令服务器。</li><li>离开房间：当用户点击“离开房间”按钮时，发送离开房间的消息给信令服务器，并关闭所有 <code>RTCPeerConnection</code> 实例。</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>joinBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>view <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 发送加入房间的消息给信令服务器</span>\n  <span class="token class-name">JSONObject</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  message<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;join&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  message<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;roomId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;your-room-id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nleaveBtn<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>view <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 发送离开房间的消息给信令服务器</span>\n  <span class="token class-name">JSONObject</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  message<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;leave&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  message<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;roomId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;your-room-id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// 关闭并删除所有 RTCPeerConnection 实例</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">RTCPeerConnection</span><span class="token punctuation">&gt;</span></span> entry <span class="token operator">:</span> peerConnections<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">removePeerConnection</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="优化和扩展" tabindex="-1"><a class="header-anchor" href="#优化和扩展" aria-hidden="true">#</a> 优化和扩展</h2><p>在实现多人音视频通话的基础上，还可以进行优化和扩展，以提高音视频质量和用户体验。</p><h3 id="优化音视频质量" tabindex="-1"><a class="header-anchor" href="#优化音视频质量" aria-hidden="true">#</a> 优化音视频质量</h3><ol><li><p>限制分辨率和帧率：可以根据网络状况和设备性能，限制音视频流的分辨率和帧率。这可以降低带宽消耗和计算需求，从而提高音视频质量。</p></li><li><p>使用合适的编解码器：选择合适的编解码器（如 H.264 或 VP8）可以显著影响音视频质量。根据应用场景和设备兼容性，选择最合适的编解码器。</p></li></ol><h3 id="网络适应性" tabindex="-1"><a class="header-anchor" href="#网络适应性" aria-hidden="true">#</a> 网络适应性</h3><p>WebRTC 提供了网络适应性功能，可以根据网络状况自动调整音视频质量。这有助于在网络不稳定时维持良好的音视频体验。可以在创建 <code>RTCPeerConnection</code> 时，通过配置 <code>RTCConfiguration</code> 启用网络适应性。</p><h3 id="安全性和隐私保护" tabindex="-1"><a class="header-anchor" href="#安全性和隐私保护" aria-hidden="true">#</a> 安全性和隐私保护</h3><ol><li>使用安全的传输协议：在实现多人音视频通话时，务必使用安全的传输协议（如 HTTPS 和 WSS）保护数据传输的安全。</li><li>对信令数据进行加密：为了保护用户隐私，可以对信令服务器传输的数据进行加密，以防止数据泄露。</li></ol><h3 id="集成其他-webrtc-功能" tabindex="-1"><a class="header-anchor" href="#集成其他-webrtc-功能" aria-hidden="true">#</a> 集成其他 WebRTC 功能</h3><ol><li>屏幕共享：在多人音视频通话的基础上，可以增加屏幕共享功能，使用户能够共享屏幕内容。WebRTC web 端提供了 <code>getDisplayMedia</code> API，android 端可以通过<code>MediaProjectionManager</code> 方便地实现屏幕共享功能。</li><li>数据通道：WebRTC 的 <code>RTCDataChannel</code> API 允许在 P2P 连接中传输任意数据。可以利用数据通道实现聊天、文件传输等功能。</li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><blockquote><p>文章中的代码部分不是完整的，有些甚至是伪代码，详细代码还是建议把源码 clone 下来看。</p></blockquote><p>本文介绍了如何使用 WebRTC 实现多人音视频通话，重点讲解了 WebRTC 的基本概念、信令服务器的编写、以及 Web 和 Android 客户端的实现。通过 P2P 架构，WebRTC 可以为实时通信提供低延迟、高质量的音视频体验。</p><p>在实现多人音视频通话的基础上，还可以进行优化和扩展，以提高音视频质量、网络适应性、安全性和隐私保护。此外，可以集成其他 WebRTC 功能，如屏幕共享和数据通道，实现更丰富的实时通信应用。</p>',35),u={},r=(0,a(3744).Z)(u,[["render",function(n,s){const a=(0,t.up)("ExternalLinkIcon");return(0,t.wg)(),(0,t.iD)("div",null,[p,(0,t._)("p",null,[(0,t.Uk)("在上一篇文章中我们实现了"),(0,t._)("a",e,[(0,t.Uk)("P2P 1v1 通话的解决方案"),(0,t.Wm)(a)]),(0,t.Uk)("，如果要实现多人的，信令服务器需要有点改动,改动不是很大，主要还是由以下几个信令组成:")]),o,(0,t._)("p",null,[(0,t.Uk)("首先，需要在 Android 项目中集成 WebRTC 库。可以参考 "),(0,t._)("a",c,[(0,t.Uk)("WebRTC 官方文档"),(0,t.Wm)(a)]),(0,t.Uk)(" 进行集成, 也可以看 "),(0,t._)("a",i,[(0,t.Uk)("webrtc_android_gradle"),(0,t.Wm)(a)]),(0,t.Uk)("。")]),l])}]])}}]);